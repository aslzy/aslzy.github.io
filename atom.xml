<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小皮博客 | Xiaopi&#39;s Blog</title>
  
  <subtitle>没有人的梦想会更卑微,做点什么让自己骄傲</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.xiaoyuyu.net/"/>
  <updated>2020-01-02T07:18:55.855Z</updated>
  <id>http://blog.xiaoyuyu.net/</id>
  
  <author>
    <name>盛领</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>95-2019年度总结-做点什么让自己骄傲</title>
    <link href="http://blog.xiaoyuyu.net/post/598be3fa.html"/>
    <id>http://blog.xiaoyuyu.net/post/598be3fa.html</id>
    <published>2020-01-01T14:09:37.000Z</published>
    <updated>2020-01-02T07:18:55.855Z</updated>
    
    <content type="html"><![CDATA[<p>2019做了很多事情，但是仍然不能称为满意。</p><a id="more"></a><h1 id="目标review"><a href="#目标review" class="headerlink" title="目标review"></a>目标review</h1><h2 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h2><ul><li>混一下，能够做点自己的事情，工资能提升。</li><li>失去了一号位的位置。其实之前自己没有想清楚。</li></ul><h2 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h2><ul><li>做好一切能做的。</li></ul><h2 id="个人"><a href="#个人" class="headerlink" title="个人"></a>个人</h2><ul><li>齐家治国?修身养性?加薪了，但是没升职。身价提升了。</li><li>时间利用更有效了，只是没有产生质变。有了自己的时间，思考。</li></ul><h2 id="家庭与团队"><a href="#家庭与团队" class="headerlink" title="家庭与团队"></a>家庭与团队</h2><ul><li>有好有坏吧。</li></ul><hr><h1 id="做了哪些事情"><a href="#做了哪些事情" class="headerlink" title="做了哪些事情"></a>做了哪些事情</h1><h2 id="工作-1"><a href="#工作-1" class="headerlink" title="工作"></a>工作</h2><ul><li>一份工作。一个还算大厂的背景。</li><li>把土带了一下。</li><li>写了一个机器人。相当于尝试了两个方向，打基础。</li><li>做了一个量化交易平台。</li><li>AI入门了。</li><li>别的没有了。</li><li>review了一下2017年的总结，其实更多的在退步。在这里拿出来，警示一下自己。<pre>  * 大局观  * 补位  * 持续集成卓有成效  * 安全管理方案  * Scrum团队管理  * 团队几次危机和风险应对  * 各种流程，恰到好处  * 自动化测试，白盒黑盒压力测试  * springboot的基础架构  * 推动力&执行力  * 客户端各种奇技淫巧&版本管理  * 前端的可行性方案&基础架构&技术栈梳理  * Devops技术栈梳理  * 团队里打鸡血和最苛刻的人  * 成功的团队招聘。面试了超过300人。几个技术骨干。ygy,lyf,xwq,wqq,lch,yzx和另外一些合适的人。  * 品质管理各种流程控制  * 几个亮点项目  * 一整套数据分析，实施方法论。  * 数据库玩的更熟了  * 分析&解决节奏</pre></li></ul><hr><h2 id="生活-1"><a href="#生活-1" class="headerlink" title="生活"></a>生活</h2><ul><li>铁蛋有了一些改进。</li><li>读了更多的书。今年读完大约了10本。</li><li>给家里建立了图书馆，需要靠后续引导了。</li><li>开始做喜马拉雅主播，锻炼语法能力。</li><li>PPT做的包装的更好了，但是没有干货提升。</li><li>铁蛋的培养体系，包括知识体系和书单。</li><li>优化了投资策略，存下了钱。</li><li>本来就是慢下来，让自己有机会走的慢一点。更加恰如其分。</li><li>但是之前的种种，其实没有进步。之前已经做了的。<ul><li>精力分配的思维导图。</li><li>家庭食谱。</li><li>财务预算决算。</li><li>家庭资金分配。</li><li>家庭生活的思维导图。包括投资等。</li><li>保险规划。</li><li>工作机会评估模型。</li></ul></li></ul><h2 id="个人-1"><a href="#个人-1" class="headerlink" title="个人"></a>个人</h2><ul><li>自己想要维护的产品列表:<ul><li>博客,后续拓展到微信公众号，头条，博客，和土一起维护。</li><li>音乐推荐网站。</li><li>对话机器人。加AI的整个基础体系。</li><li>量化交易平台。</li><li>比特币定投平台。(第一个可见的可以生产化的的产品)</li></ul></li><li>身体:<ul><li>健身了至少，全年跑了100公里。健身时间增加了。 </li></ul></li></ul><h2 id="家庭和团队"><a href="#家庭和团队" class="headerlink" title="家庭和团队"></a>家庭和团队</h2><ul><li>失去了一号位的定位。明年要重建。</li><li>带了学弟和他们公司，继续做顾问。</li><li>给南京的团队帮了忙，其实性价比极其低下。这些事情三年前都是看不上的。</li><li>父母的关系恶化，其实是极大的打击。</li><li>目前养下来的人，其实只是权宜之计。</li><li>花在家里的时间增加了。</li><li>组织了6次线下聚餐，但是没有转化为收益。</li><li>去旅游了一次。还回家了一次。</li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>没想到了。</p><hr><h1 id="有哪些做得好的"><a href="#有哪些做得好的" class="headerlink" title="有哪些做得好的"></a>有哪些做得好的</h1><ul><li>真的是在退步的一年。可能好处就是身体和心理压力减少了。但是主要是多赚了钱，给了土一个还可以的位置。</li></ul><hr><h1 id="有哪些做的不好的"><a href="#有哪些做的不好的" class="headerlink" title="有哪些做的不好的?"></a>有哪些做的不好的?</h1><ul><li>再想想。</li></ul><hr><h1 id="2020的目标"><a href="#2020的目标" class="headerlink" title="2020的目标"></a>2020的目标</h1><ul><li>天津买房。</li><li>铁蛋的教育。</li><li>坚定地执行可控的投资策略。定投+理财。即便是数字货币和股票也坚决定投。保守主义。</li><li>模型思维，全部学一下。读10本书单上的书。</li><li>帮几个人的工作稳固一下，培养自己的人，尤其是土。</li><li>重归一号位，想办法攒一个事情，养活1个全职(下半年)+3个兼职的人，争取一年发出去6万工资,并且公司能取得对应的利润。搭建一套靠谱的框架便于接项目。</li><li>继续组织6次线下聚餐。更靠谱的给两家公司做顾问，不求多。</li><li>和土的博客写出10篇高质量的文章。</li><li>升职。</li><li>对话机器人+定投平台产品化。</li><li>学会游泳。</li><li>给自己+土和铁蛋制定调养+健身计划。自己全年跑完100公里(20次5公里,其中争取像今年一样奥森10次)，游泳10公里,跳绳2万次。爬山5次。其他热身10小时。</li><li>其他计划能完成。包括预算，保险，投资，食谱等。<p><!--<span id="busuanzi_container_page_pv"> 阅读量<span id="busuanzi_value_page_pv"></span>次</span>--></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2019做了很多事情，但是仍然不能称为满意。&lt;/p&gt;
    
    </summary>
    
      <category term="杂谈" scheme="http://blog.xiaoyuyu.net/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="年度总结" scheme="http://blog.xiaoyuyu.net/tags/%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    
      <category term="2019" scheme="http://blog.xiaoyuyu.net/tags/2019/"/>
    
  </entry>
  
  <entry>
    <title>93-数据库设计指南</title>
    <link href="http://blog.xiaoyuyu.net/post/17a93bf0.html"/>
    <id>http://blog.xiaoyuyu.net/post/17a93bf0.html</id>
    <published>2019-11-22T03:53:21.000Z</published>
    <updated>2020-01-01T14:13:05.525Z</updated>
    
    <content type="html"><![CDATA[<p>干货来了, 数据库设计最佳实践.</p><a id="more"></a><h1 id="基础部分"><a href="#基础部分" class="headerlink" title="基础部分"></a>基础部分</h1><ul><li>表存储引擎必须使用InnoDB。</li><li>表字符集默认使用utf8，必要时候使用utf8mb4。</li><li>数据库，表，字段字符集一定要统一，统一字符集可以避免由于字符集转换产生的乱码。</li><li>不允许使用存储过程，视图，触发器，Event。</li><li>禁止在数据库中存储大文件，例如照片，可以将大文件存储在对象存储系统，数据库中存储访问路径。</li><li>禁止在线上环境做数据库压力测试。各个环境的数据库应该隔离。</li><li>事物尽可能的小，不要在代码层面直接一个大的transaction。</li><li>我们不删除记录，我们总是用删除标记(软删除)来进行”删除”操作。</li><li>UUID ()，USER () 这样的 MySQL INSIDE 函数对于复制来说是很危险的，会导致主备数据不一致，所以请不要使用。如果一定要使用 UUID 作为主键，让应用程序来产生。</li><li>控制单表数据量，最佳实践是在500万条以下，应该在一开始就考虑： 可以用历史数据归档（应用于日志数据），分库分表（应用于业务数据）等手段来控制数据量大小。</li><li>字段约束和索引应该分开来设计。</li></ul><h1 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h1><ul><li>库名，表名，列名必须用小写，采用下划线分隔。因为默认情况下，mysql对大小写敏感，mysql数据库本质上是linux系统下的一个文件，而linux系统是大小写敏感的。</li><li>库名，表名，列名必须见名知义，长度不要超过32字符</li><li>建议: 字典表以 ${domain缩写<em>dict</em>}为前缀。如 cm_dict_,  关联表以${domain缩写<em>relation</em>}为前缀。</li><li>有数据库对象名称禁止使用mysql保留关键字。</li><li>所有存储相同数据的列名和列类型必须一致，比如user表中的id和order表中的user_id。</li></ul><h1 id="字段设计及约束"><a href="#字段设计及约束" class="headerlink" title="字段设计及约束"></a>字段设计及约束</h1><ul><li>禁止对数据库表字段进行删除和修改的操作。</li><li>不要使用联合主键，目前我们规范中推荐的是使用业务无关的自增主键。</li><li>在设计时尽量包含两个日期字段:create_time (创建日期),update_time (修改日期) 且 非空，对表的记录进行更新的时候，必须包含对 update_time 字段的更新。</li><li>建议将大字段，访问频度低的字段拆分到单独的表中存储，分离冷热数据。</li><li>设计表时尽量用“小数据类型”，比如尽量避免text，blob,如果必须使用，应该在单独的表中进行存储,实际上更应该存储到别的存储系统并且在mysql中保存链接即可。</li><li>禁止使用外键，如果要保证完整性，应由代码来实现。</li><li>根据业务区分使用tinyint/int/bigint，分别会占用1/4/8字节。</li><li>字段长度比较固定，或者长度近似的业务场景，适合使用char，能够减少碎片，查询性能高。</li><li>字段长度相差较大，或者更新较少的业务场景，适合使用varchar(n)，能够减少空间。其中n表示字符数而不是字节数。</li><li>建议: 必须把字段定义为NOT NULL并设默认值。</li><li>使用varchar(20)存储手机号，不要使用整数。或者char(20)。</li><li>使用INT UNSIGNED存储IPv4，不要用char(15)。</li><li>使用TINYINT来代替ENUM。</li><li>不要在表中建立预留字段，新增字段的代价并不是很大。</li><li>对于非负型的数据（如自增ID、整型IP）来说，要优先使用无符号整型来存储。</li><li>同财务相关的金额类数据必须使用decimal类型,可以保证不出现精度丢失。</li><li>手机号，身份证号等可以作为索引，可以建立唯一约束，但是不要作为主键。</li></ul><h1 id="索引规范"><a href="#索引规范" class="headerlink" title="索引规范"></a>索引规范</h1><ul><li>在select，delete，update的where从句中的列,包含在order by，group by，distinct字段中的列和多表join的关联列建立索引</li><li>唯一索引使用uniq_[字段名]来命名。</li><li>非唯一索引使用idx_[字段名]来命名。</li><li>单张表索引数量建议控制在5个以内。</li><li>索引会影响写的性能。</li><li>异常复杂的查询需求，可以选择ES等更为适合的方式存储。</li><li>区分度最高的放在联合索引的最左侧（区分度=列中不同值的数量/列的总行数）。</li><li>尽量把字段长度小的列放在联合索引的最左侧（因为字段长度越小，一页能存储的数据量越大，IO性能也就越好）。</li><li>使用最频繁的列放到联合索引的左侧（这样可以比较少的建立一些索引）。</li><li>组合索引字段数不建议超过5个。</li><li>不建议在频繁更新的字段上建立索引。</li><li>非必要不要进行JOIN查询，如果要进行JOIN查询，被JOIN的字段必须类型相同，并建立索引</li><li>理解组合索引最左前缀原则，避免重复建设索引，如果建立了(a,b,c)，相当于建立了(a), (a,b), (a,b,c)。</li><li>对于非主键唯一的int类型字段，没有将其单独设置为索引比必要。设置索引后反倒增大了内存的占用，检索时的性能也不见得会有提升。</li><li>对于频繁的查询优先考虑使用覆盖索引(只在必要且数据量较大频繁使用的场景)。覆盖索引：就是包含了所有查询字段(where,select,ordery by,group by包含的字段)的索引。</li></ul><h1 id="SQL语句规范"><a href="#SQL语句规范" class="headerlink" title="SQL语句规范"></a>SQL语句规范</h1><ul><li>禁止使用select *，只获取必要字段。</li><li>insert必须指定字段，禁止使用insert into T values()。指定字段插入，在表结构变更时，能保证对应用程序无影响。</li><li>不允许在where条件列使用函数。</li><li>建议: 不要负向查询以及%开头的模糊查询。</li><li>同一个字段上的OR必须改写为IN，IN的值必须少于50个。</li><li>应用程序必须捕获SQL异常，并且记录日志。</li><li>SQL事物不能设计太大，比如一次性提交10W条insert，一般来说insert事物的话，5K~1W来做批处理就可以了。</li><li>过大的SQL应该拆分成小的，减少锁的时间。同时也更容易运用CPU的性能。</li><li>update时，where语句尽量要走索引，不然会全表扫描，一般情况下1G的数据至少需要10S。</li><li>禁止使用order by rand 进行随机排序。</li></ul><h1 id="操作建议"><a href="#操作建议" class="headerlink" title="操作建议"></a>操作建议</h1><ul><li>进行非查询操作时，尽量使用begin来开启事务。否则可能因为少写了where条件或者其他误操作无法回滚。</li><li>应用程序中的数据库账号应该只赋予所需的最小权限。最佳实践是不分配DELETE的权限。</li><li>禁止从开发环境，测试环境直连生产环境数据库。</li><li>合理使用临时表，备份表，报表，而不是直接操作原有数据表。</li></ul><h1 id="设计checklist"><a href="#设计checklist" class="headerlink" title="设计checklist"></a>设计checklist</h1><ul><li>是否详细定义了数据库的组织结构和内容？</li><li>是否有合理的数据库规范。</li><li>是否按照组件进行了合理的划分。</li><li>是否指出了所用关键的业务规则，并描述其对系统的影响？</li><li>是否有不是必须的实体？</li><li>是否梳理清楚了实体与设计之间的关系。</li><li>基本表的性质: 在有必要的场景，是否设计了合适的结果表(存储统计数据)。</li><li>原子性。基本表中的字段是不可再分解的。</li><li>原始性。基本表中的记录是原始数据（基础数据）的记录。</li><li>演绎性。由基本表与代码表中的数据，可以派生出所有的输出数据。</li><li>稳定性。基本表的结构是相对稳定的，表中的记录是要长期保存的。</li><li>是否在设计范式和性能之间做了良好的权衡,并且在此基础上做了合理的字段冗余。</li><li>是否识别与正确处理多对多的关系。</li><li>E-R图是否满足: 结构清晰、关联简洁、实体个数 适中、属性分配合理、没有低级冗余。</li></ul><p><!--<span id="busuanzi_container_page_pv">   阅读量<span id="busuanzi_value_page_pv"></span>次</span>--></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;干货来了, 数据库设计最佳实践.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>91-自杀前的13秒</title>
    <link href="http://blog.xiaoyuyu.net/post/1b91a4c6.html"/>
    <id>http://blog.xiaoyuyu.net/post/1b91a4c6.html</id>
    <published>2019-05-01T14:52:26.000Z</published>
    <updated>2019-09-17T02:52:36.350Z</updated>
    
    <content type="html"><![CDATA[<p>其实这个世界虽然充满了黑暗,宇宙的本质也是黑暗与竞争,但是我们仍然需要鼓起巨大的勇气,因为这个世界本来就不完美,不完整。<strong>绝望是由无数细碎的失望聚集而成的。同样,爱也是。</strong> </p><a id="more"></a><p>推荐一篇文章，原文来自<a href="https://mp.weixin.qq.com/s/5hDW8cl6Un_-2ogtB6e2Lw" target="_blank" rel="noopener">便利峰的公众号-《自杀前的13秒。》</a></p><p>因为我们每个个体,组成这个世界的每一个部分,每一个原子都不完美。<strong>你要知道这个世界的局限性。</strong></p><p>但是这个世界,总有一些值得你鼓起勇气去珍惜的地方。</p><p>生命是一场体验,一次修行。所以,不要轻易放弃啊。</p><p><!--<span id="busuanzi_container_page_pv">   阅读量<span id="busuanzi_value_page_pv"></span>次</span>--></p><p></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;其实这个世界虽然充满了黑暗,宇宙的本质也是黑暗与竞争,但是我们仍然需要鼓起巨大的勇气,因为这个世界本来就不完美,不完整。&lt;strong&gt;绝望是由无数细碎的失望聚集而成的。同样,爱也是。&lt;/strong&gt; &lt;/p&gt;
    
    </summary>
    
      <category term="他山之石" scheme="http://blog.xiaoyuyu.net/categories/%E4%BB%96%E5%B1%B1%E4%B9%8B%E7%9F%B3/"/>
    
    
      <category term="读后感" scheme="http://blog.xiaoyuyu.net/tags/%E8%AF%BB%E5%90%8E%E6%84%9F/"/>
    
  </entry>
  
  <entry>
    <title>90-极简主义-我的衣橱只需要这些衣服</title>
    <link href="http://blog.xiaoyuyu.net/post/bf4e01b6.html"/>
    <id>http://blog.xiaoyuyu.net/post/bf4e01b6.html</id>
    <published>2019-04-14T15:31:13.000Z</published>
    <updated>2019-09-17T02:52:36.350Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>之前一直说要极简主义，目前已经在各个维度开始执行和总结。今天又到了搬家的前夕，正好趁着周末把衣服重新整理了一下。</p></blockquote><blockquote><p>有本书叫做《法国人只需要十件衣服》，虽然没有拜读过，但是我自己整理了一个列表。然后依据这个原则，只做替换，不买多余的。控制数量之后，也很容易提升品质，同时可以极大的减少打理衣物所需的时间。</p></blockquote><a id="more"></a><p>#列表：</p><h2 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h2><ul><li><strong>内裤</strong>: 5 四季共享，但是一般4个月轮换一批。</li><li><strong>袜子</strong>：10 只分厚薄两款即可，也是4个月轮换一批。</li><li><strong>棉裤</strong>： 1 只有过冬最冷的几天需要。很少会用到。</li><li><strong>凉拖</strong>：1 夏天及洗澡时使用。</li><li><strong>棉拖鞋</strong>：1 其他季节使用。</li></ul><h2 id="通用"><a href="#通用" class="headerlink" title="通用"></a>通用</h2><ul><li><strong>保暖内衣</strong>: 3套 半年轮换一次。除了夏天，都可以穿了。</li></ul><h2 id="衣物"><a href="#衣物" class="headerlink" title="衣物"></a>衣物</h2><ul><li><strong>POLO衫</strong>: 2 应付夏天，百搭各种场合。两件轮换。</li><li><strong>圆领衫</strong>: 1 夏天晚上睡觉偶尔穿，也可以运动穿。</li><li><strong>运动T恤</strong> 1 和圆领衫轮换。</li><li><strong>西裤</strong>: 2 日常上班轮换。</li><li><strong>厚牛仔裤</strong>：1 冬天非正式场合。</li><li><strong>薄休闲裤</strong>：1 各种非正式场合，家里及运动时穿。</li><li><strong>毛衣</strong>: 2 厚，薄各一件。</li><li><strong>短袖衬衣</strong>: 3 夏天正装</li><li><strong>长袖衬衣</strong>: 3 春秋正装。里面一般还可以搭配内衣。</li><li><strong>开领卫衣</strong>: 1 卫衣场合。</li><li><strong>正装</strong>: 西服外套1，其他衬衣和西裤复用日常工作装即可</li><li><strong>运动马裤</strong>：1 和短裤一起轮换夏天的场合即可。夏天休闲也可以穿。</li><li><strong>运动短裤</strong>: 1 和马裤一起轮换夏天的场合即可。夏天休闲也可以穿。</li><li><strong>运动长裤</strong>：复用休闲裤 </li><li><strong>厚长羽绒服</strong>：1 北京过冬室外时间也不长。</li><li><strong>短薄羽绒服</strong>：1 轮换用，初冬和初春都可以用。</li><li><strong>风衣</strong>: 1 需要的场合也不是很多。</li></ul><h2 id="鞋"><a href="#鞋" class="headerlink" title="鞋"></a>鞋</h2><ul><li><strong>运动鞋</strong>：1 不会每天锻炼，所以一双足够。</li><li><strong>皮鞋</strong>： 2 轮换，基本3个月换一双。已经是固定搭配。</li><li><strong>冬天御寒鞋</strong>： 1 一双足矣。</li></ul><h2 id="其他配饰"><a href="#其他配饰" class="headerlink" title="其他配饰"></a>其他配饰</h2><ul><li><strong>背包</strong>：1 从来出差的各种场合都希望自己控制在一个包以内。</li><li><strong>皮带</strong>：1 很少需要。</li></ul><h1 id="四季及各种场合搭配"><a href="#四季及各种场合搭配" class="headerlink" title="四季及各种场合搭配:"></a>四季及各种场合搭配:</h1><ul><li><strong>深冬</strong><ul><li><strong>室外</strong> 厚长羽绒服+衬衣+毛衣+保暖内衣,保暖内裤+棉裤+西裤。</li><li><strong>室内</strong> 室外基础上减去羽绒服即可。</li><li><strong>运动休闲</strong> 室内运动为主，和秋天运动一致。</li></ul></li><li><strong>初冬，深秋，初春</strong>：<ul><li><strong>室外</strong> 薄羽绒服+衬衣+保暖内衣, 保暖内裤+西裤。风衣轮换。</li><li><strong>室内</strong> 室外基础上减去羽绒服即可。</li><li><strong>运动休闲</strong> 保暖内衣+卫衣，保暖内裤+休闲裤（运动裤）。</li></ul></li><li><strong>春秋时节</strong>：<ul><li><strong>室外</strong> 衬衣+保暖内衣，保暖内裤+西裤。</li><li><strong>室内</strong> 基本一致。</li><li><strong>运动休闲</strong> 保暖内衣+薄衬衣，保暖内裤+休闲裤（运动裤）。</li></ul></li><li><strong>盛夏</strong>：<ul><li><strong>室外</strong> POLO衫（长短衬衣），西裤。</li><li><strong>室内</strong> 同室外。</li><li><strong>运动休闲</strong> 圆领衫（运动T恤），休闲裤（马裤，短裤）。</li></ul></li></ul><h1 id="如何处理旧衣物呢？"><a href="#如何处理旧衣物呢？" class="headerlink" title="如何处理旧衣物呢？"></a>如何处理旧衣物呢？</h1><ul><li>款式比较新，但是自己已经没法穿的，大件，咸鱼和转转上低价卖好了。  </li><li>质量好，没坏的，款式朴素的捐给小区旧衣物箱。  </li><li>款式不适合捐赠，较新的整理好用单独的袋子，放垃圾箱边上。有需要的会取走。也有论斤收旧衣服的。直接处理也可以。  </li><li>其他已经坏掉的，就直接扔了吧。</li></ul><p><!--<span id="busuanzi_container_page_pv">   阅读量<span id="busuanzi_value_page_pv"></span>次</span>--></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;之前一直说要极简主义，目前已经在各个维度开始执行和总结。今天又到了搬家的前夕，正好趁着周末把衣服重新整理了一下。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;有本书叫做《法国人只需要十件衣服》，虽然没有拜读过，但是我自己整理了一个列表。然后依据这个原则，只做替换，不买多余的。控制数量之后，也很容易提升品质，同时可以极大的减少打理衣物所需的时间。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="术与道" scheme="http://blog.xiaoyuyu.net/categories/%E6%9C%AF%E4%B8%8E%E9%81%93/"/>
    
    
      <category term="极简主义" scheme="http://blog.xiaoyuyu.net/tags/%E6%9E%81%E7%AE%80%E4%B8%BB%E4%B9%89/"/>
    
      <category term="术" scheme="http://blog.xiaoyuyu.net/tags/%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>89-摘要-成功创业者背后的13个秘密</title>
    <link href="http://blog.xiaoyuyu.net/post/25e75bf3.html"/>
    <id>http://blog.xiaoyuyu.net/post/25e75bf3.html</id>
    <published>2019-03-09T13:41:55.000Z</published>
    <updated>2019-09-17T02:52:36.349Z</updated>
    
    <content type="html"><![CDATA[<p>本文是”《最牛孵化器YC的总裁：成功创业者背后的13个秘密》” 的摘要及批注。作者是Y Combinator总裁Sam Altman. 原文地址在: <a href="http://blog.samaltman.com/how-to-be-successful" target="_blank" rel="noopener">http://blog.samaltman.com/how-to-be-successful</a></p><a id="more"></a><ul><li>一开始创业者都是奔着钱去的,但是最后都需要创造好的产品。</li><li>思考1: 给自己创造复利。<ul><li>指数式曲线是创造财富的关键。</li><li>为了寻找和创造网络效应与极端可扩性，值得付出大量努力。</li><li>朝着一条能产生复利效应的职业生涯前进非常重要。</li><li>对于你定义的任何成功指标(金钱、地位、影响世界等)，把自己的经历集中到能在这些指标后面再加一个零的事情上。</li><li>为了找到我的下一份事业，需要花多少时间我都愿意。但我总会希望这个项目一旦成功，将会令我职业生涯的所有其他东西看起来都像它的注脚。</li><li>我认为在商业（无论是对公司还是个人职业生涯）中，最大的竞争优势是要有长远思维，眼界要宽，要能够看到这个世界上的不同系统是如何整合到一起的。要相信指数式的发展，要有耐心，惊喜将会在远方等着你。</li></ul></li><li>思考2: 要自信爆棚。<ul><li>最成功的人自信到几乎产生错觉的地步。</li><li>你越是充满抱负，这个世界就越想挫伤你的锐气。</li><li>自我信念必须有“自我意识”加以平衡。</li></ul></li><li>思考3: 学会独立思考。<ul><li>创业这门技能很难教，因为原创性思维是很难教的。学校的模式不是教这个的——实际上，学校奖励的往往是相反。所以你必须自己培养这种东西。</li><li>要按照“第一性原理”去思考，尝试产生有趣的新想法，然后找人去交换这些想法，这是修炼创业技能的很好手段。下一步，就是找到简单快捷的手段在现实世界里去验证这些想法。</li><li>“我会失败很多次，但我终归会做对一次”就是创业之道。你必须给自己留出很多走运的机会。</li></ul></li><li>思考4: 要善于“推销”。<ul><li>只要加以刻意的练习，任何人都可以做得更好。</li><li>我的另一建议是，但凡重要时刻都要亲自出面。  </li><li>光有自我信念是不够的——你还得能说服其他人相信你所相信的的东西。</li><li>从某种程度来说，所有伟大的职业生涯都会变成推销工作。你必须把自己的计划向客户、潜在员工、媒体、投资者等进行布道。而这需要有鼓舞人心的愿景、强悍的沟通技能、一定的魅力，并且证明你有执行能力。</li><li>而要想善于推销，最好的办法是真心相信你在推销的东西。</li></ul></li><li>思考5: 让冒险变得容易。<ul><li>大多数人高估了风险又低估了回报。</li><li>要寻找一些小一点的赌注，比如如果犯错会输掉1倍，但如果赢了能挣100倍的赌注，然后朝着那个方向下更大的赌注。</li><li>有些创始人在Google或者Facebook工作得太久了。当大家习惯了舒适、可预测的生活，并且拥有可以在所做的任何事情上取得成功的声誉之后，就很难放弃这一切了。也就是创业成本太高了。</li></ul></li><li>思考6: 聚焦。<ul><li>专注度是工作的力量倍增器。</li><li>我碰到过的每个人，都把更多时间放在思考应该专注于什么上面。做对的事情要比努力工作很长时间重要得多，大多数人把太多时间浪费在无关紧要的事情上。</li><li>一旦你弄清楚了该做什么，要毫不迟疑地迅速完成一小撮优先事项。我至今还没有见过一个行动缓慢但非常成功的人。</li></ul></li><li>思考7: 努力工作。<ul><li>光靠聪明或者勤奋，能让你掌握本领域的90%，这当然也就很大的成就。但要想掌握99%你就得二者兼具——因为你得跟其他同样非常有才华的人竞争，这些人有很出色的想法，也愿意付出很多。</li><li>极端的人得到极致的结果。</li><li>努力工作势必要在生活上做出巨大牺牲，决定不这么做也是完全可以理解的，但是这样做也有很多好处。大多数情况下，发展势头会产生复合效应，而成功也会带来更大的成功。</li><li>努力工作的复合效应就像利息，你越早如此，可以用来收获回报的时间就越多。当你身上的责任不那么多时，努力工作也更加容易些，当你年轻时经常就是这种情况。</li><li>每个人都有自己的策略，但是有一个总能奏效办法，那就是找到自己喜欢的工作，跟自己愿意花大量时间共事的人工作。</li></ul></li><li>思考8: 要大胆一点。<ul><li>令你感到兴奋的东西往往也会令其他人感到兴奋。   </li></ul></li><li>思考9: 要率性。<ul><li>人的潜能其实是非常巨大的，足以让事情发生。缺乏自信、过早放弃，以及对自己不够狠，这些因素阻止了大多数人发挥自身的潜能。</li><li>那些说“我会一直做下去，直到把它做成；无论遇到什么样的挑战，我都会想办法解决它，”并且言出必行的人，几乎总是会取得成功。他们的执着足以给自己一个机会，让运气站在自己这边。</li></ul></li><li>思考10: 让别人难以竞争。<ul><li>别人难以与之竞争的公司往往价值更高。</li><li>要想别人很难跟你竞争，就得建立起你的影响力。</li></ul></li><li>思考11: 建立关系网络。<ul><li>你所认识的真正有才之人的网络规模，往往决定了你成就的高度。</li><li>建立关系网络的最好办法之一，是真心照顾跟你共事的人，在他们当中树立起声誉。</li><li>记住要花时间跟积极的，对你的抱负表示支持的人呆在一起。</li><li>“因为我不擅长Y，所以没法做X”是我经常听见创业者的说法，频率之高令我感到惊讶。弥补缺点的最好办法，是招募一支互补性强的团队，而不是光招那些跟你擅长一样东西的人。</li></ul></li><li>思考12: 你靠拥有东西而变得富有。<ul><li>福布斯富豪榜上的人几乎没有一个人是凭借着高工资而上榜的。</li><li>你是靠拥有价值会迅速增加的东西而变得富有的。</li><li>这个东西可以是企业的一部分、房地产、自然资源、知识产权，或者其他类似的东西。但无论如何，你都需要拥有某个东西的产权，而不仅仅是出卖你的时间。时间只能线性扩充。</li><li>让价值迅速增长的最好办法，是成规模地做出大家想要的东西。</li></ul></li><li>思考13: 要自我驱动。<ul><li>我所认识的最成功的人，首先都是内驱型的。</li><li>大多数人首先是外驱型的：他们做现在所做的东西，是因为想要给其他人留下印象。<p><!--<span id="busuanzi_container_page_pv">阅读量<span id="busuanzi_value_page_pv"></span>次</span>--></p></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文是”《最牛孵化器YC的总裁：成功创业者背后的13个秘密》” 的摘要及批注。作者是Y Combinator总裁Sam Altman. 原文地址在: &lt;a href=&quot;http://blog.samaltman.com/how-to-be-successful&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://blog.samaltman.com/how-to-be-successful&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="他山之石" scheme="http://blog.xiaoyuyu.net/categories/%E4%BB%96%E5%B1%B1%E4%B9%8B%E7%9F%B3/"/>
    
    
      <category term="方法论" scheme="http://blog.xiaoyuyu.net/tags/%E6%96%B9%E6%B3%95%E8%AE%BA/"/>
    
      <category term="摘要" scheme="http://blog.xiaoyuyu.net/tags/%E6%91%98%E8%A6%81/"/>
    
      <category term="读书笔记" scheme="http://blog.xiaoyuyu.net/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>88-鱼缸里的小鱼们</title>
    <link href="http://blog.xiaoyuyu.net/post/1211ffd9.html"/>
    <id>http://blog.xiaoyuyu.net/post/1211ffd9.html</id>
    <published>2019-03-09T13:13:50.000Z</published>
    <updated>2019-09-17T02:52:36.348Z</updated>
    
    <content type="html"><![CDATA[<p>养了第三年的鱼缸，现在已经有一缸老水，当作平日休闲使用了。😄</p><a id="more"></a><p>现在鱼缸里面的生物有:</p><ul><li>一只巴西龟。</li><li>16条斑马鱼。</li><li>一只辣椒蟹。</li><li>两条白色锦鲤。</li><li>2条红草花金鱼。</li><li>2条纯红金鱼。</li><li>1条黄色斗鱼。</li><li>2株水榕树。</li><li>2只苹果螺。</li><li>1只斑马螺。</li><li>1条清道夫。</li></ul><p><img src="/img/2019/2019-fish/2019-03-09-01.jpeg" alt></p><p><img src="/img/2019/2019-fish/2019-03-09-02.jpeg" alt></p><p><img src="/img/2019/2019-fish/2019-03-09-03.jpeg" alt></p><p><img src="/img/2019/2019-fish/2019-03-09-04.jpeg" alt></p><p><img src="/img/2019/2019-fish/2019-03-09-05.jpeg" alt></p><p><img src="/img/2019/2019-fish/2019-03-09-06.jpeg" alt></p><p><img src="/img/2019/2019-fish/2019-03-09-07.jpeg" alt></p><p><img src="/img/2019/2019-fish/2019-03-09-08.jpeg" alt></p><p><!--<span id="busuanzi_container_page_pv">   阅读量<span id="busuanzi_value_page_pv"></span>次</span>--></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;养了第三年的鱼缸，现在已经有一缸老水，当作平日休闲使用了。😄&lt;/p&gt;
    
    </summary>
    
      <category term="杂谈" scheme="http://blog.xiaoyuyu.net/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="修生养心" scheme="http://blog.xiaoyuyu.net/tags/%E4%BF%AE%E7%94%9F%E5%85%BB%E5%BF%83/"/>
    
      <category term="养鱼" scheme="http://blog.xiaoyuyu.net/tags/%E5%85%BB%E9%B1%BC/"/>
    
  </entry>
  
  <entry>
    <title>87-一个建议的接口文档模板</title>
    <link href="http://blog.xiaoyuyu.net/post/abe8667.html"/>
    <id>http://blog.xiaoyuyu.net/post/abe8667.html</id>
    <published>2019-01-14T14:16:34.000Z</published>
    <updated>2019-09-17T02:52:36.348Z</updated>
    
    <content type="html"><![CDATA[<p>XXX电子商务平台API文档</p><p>======</p><h1 id="基础说明"><a href="#基础说明" class="headerlink" title="基础说明"></a>基础说明</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p><em>[说明文档用途。]</em><br>编写本文的目的是为了将系统功能进行模块化、服务化，将用户的操作以服务的方式提供。系统与系统之间遵循服务规范，将系统与系统之间的交互转为定制化服务交互，以实现系统与系统之间的集成。</p><a id="more"></a><h2 id="基本约束"><a href="#基本约束" class="headerlink" title="基本约束"></a>基本约束</h2><h3 id="基本设计原则"><a href="#基本设计原则" class="headerlink" title="基本设计原则"></a>基本设计原则</h3><p>参考《86-RestAPI设计指南》</p><h3 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h3><ul><li>所有接口字符集采用UTF-8。</li></ul><h3 id="返回类型约束"><a href="#返回类型约束" class="headerlink" title="返回类型约束"></a>返回类型约束</h3><ul><li>所有接口返回必须是严格定义的JSON类型。</li></ul><h3 id="接口版本约束"><a href="#接口版本约束" class="headerlink" title="接口版本约束"></a>接口版本约束</h3><ul><li>不允许发布无版本号的接口。</li><li>接口版本首先解决的是一组接口的版本问题。</li></ul><h2 id="请求公共约束"><a href="#请求公共约束" class="headerlink" title="请求公共约束"></a>请求公共约束</h2><p>请求的基本模板:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">curl -X[HTTP METHOD] -H "Content-Type: application/json" -H "[token-info]:"   </span><br><span class="line"> "https://api-dev.[groupname].xiaoyuyu.io/[client-group]/[service-group-name]/  </span><br><span class="line"> [version]/[endpoint]" -d '&#123;  </span><br><span class="line">"head": [meta-parameters],  </span><br><span class="line">"body": [content]   </span><br><span class="line">&#125;'</span><br></pre></td></tr></table></figure></p><h2 id="URL整体规划"><a href="#URL整体规划" class="headerlink" title="URL整体规划"></a>URL整体规划</h2><h3 id="域名规范"><a href="#域名规范" class="headerlink" title="域名规范"></a>域名规范</h3><ul><li><strong><a href="https://api-[env-name].[groupname].domain.io/[clientGroup]/[version]/[endpoint]" target="_blank" rel="noopener">https://api-[env-name].[groupname].domain.io/[clientGroup]/[version]/[endpoint]</a></strong></li></ul><h3 id="域名规划"><a href="#域名规划" class="headerlink" title="域名规划"></a>域名规划</h3><ul><li>开发环境: <a href="https://api-dev.payment.xiaoyuyu.io/" target="_blank" rel="noopener">https://api-dev.payment.xiaoyuyu.io/</a></li><li>测试环境: <a href="https://api-test.payment.xiaoyuyu.io/" target="_blank" rel="noopener">https://api-test.payment.xiaoyuyu.io/</a></li><li>预演环境: <a href="https://api-staging.payment.xiaoyuyu.io/" target="_blank" rel="noopener">https://api-staging.payment.xiaoyuyu.io/</a></li><li>线上测试环境: <a href="https://api-onlinetest.payment.xiaoyuyu.io/" target="_blank" rel="noopener">https://api-onlinetest.payment.xiaoyuyu.io/</a></li><li>生产环境: <a href="https://api.payment.xiaoyuyu.io/" target="_blank" rel="noopener">https://api.payment.xiaoyuyu.io/</a></li><li>其中,线上测试环境是上线过程中备用,比如线上一共3台生产环境服务器,把其中一台从生产环境切掉，更新程序并且将域名指向它，测试完之后再将生产环境流量切换过来。</li></ul><h2 id="接口认证"><a href="#接口认证" class="headerlink" title="接口认证"></a>接口认证</h2><h2 id="基本数据类型约定"><a href="#基本数据类型约定" class="headerlink" title="基本数据类型约定"></a>基本数据类型约定</h2><p>此约定是系统整体容错的一部分，但是无论接口使用者还是接口生产者，都不应该因为此容错而减少自己模块本来需要的容错工作。  </p><table><thead><tr><th>数据类型</th><th>类型说明</th><th>默认值</th><th>备注</th></tr></thead><tbody><tr><td><strong>JSONObject</strong></td><td>JSON对象</td><td>{}</td><td></td></tr><tr><td><strong>JSONArray</strong></td><td>JSON数组</td><td>[]</td><td>数组中不允许使用混合类型</td></tr><tr><td><strong>Integer</strong></td><td>整型</td><td>Integer.MIN_VALUE</td><td></td></tr><tr><td><strong>Float</strong></td><td>浮点型</td><td>Float.MIN_VALUE</td><td></td></tr><tr><td><strong>Char</strong></td><td>字符型</td><td>空格</td><td></td></tr><tr><td><strong>String</strong></td><td>字符串</td><td>空字符串</td><td>不允许直接返回NULL</td></tr><tr><td><strong>Boolean</strong></td><td>布尔型</td><td>Boolean.FLASE</td><td>默认返回false</td></tr><tr><td><strong>嵌套对象</strong></td><td>嵌套对象</td><td>{}</td><td>根对象返回空,子对象不处理</td></tr><tr><td><strong>嵌套数组</strong></td><td>嵌套数组</td><td>[]</td><td>根对象返回空,子对象不处理</td></tr></tbody></table><h2 id="公共输入参数规范"><a href="#公共输入参数规范" class="headerlink" title="公共输入参数规范"></a>公共输入参数规范</h2><p>TODO: 补充token,加密,国际化,等等</p><table><thead><tr><th>字段名</th><th>必须</th><th>数据类型</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>requestInfo</td><td>是</td><td>JSONObject</td><td>表达每个请求的信息</td><td></td></tr><tr><td>requestInfo.sessionId</td><td>是</td><td>String</td><td>UUID,每次进入APP到退出算一次会话</td><td></td></tr><tr><td>requestInfo.reqId</td><td>是</td><td>String</td><td>UUID,每次请求独立生成一个Id</td><td></td></tr><tr><td>apkInfo</td><td>是</td><td>JSONObject</td><td>表达每个apk的信息</td><td></td></tr><tr><td>apkInfo.apkType</td><td>是</td><td>String</td><td>表示APK本身的类型</td><td>Dev,Debug,beta</td></tr><tr><td>apkInfo.apkId</td><td>是</td><td>String</td><td>UUID,每次安装会单独生成一个apkId</td><td></td></tr><tr><td>apkInfo.apkVersion</td><td>是</td><td>String</td><td>App的内部版本号</td><td></td></tr><tr><td>apkInfo.appVersion</td><td>是</td><td>String</td><td>App的显示版本号</td><td></td></tr><tr><td>clientInfo</td><td>是</td><td>JSONObject</td><td>表达客户端的信息</td><td></td></tr><tr><td>clientInfo.ip</td><td>是</td><td>String</td><td>客户端ipV4的地址</td><td></td></tr><tr><td>clientInfo.romInfo</td><td>是</td><td>String</td><td>定制版操作系统的信息</td><td></td></tr><tr><td>clientInfo.deviceTag</td><td>否</td><td>String</td><td>设备的标记</td><td></td></tr><tr><td>clientInfo.osInfo</td><td>否</td><td>String</td><td>操作系统的信息</td><td></td></tr><tr><td>userInfo</td><td>是</td><td>JSONObject</td><td>表达用户的信息</td><td></td></tr><tr><td>userInfo.userId</td><td>是</td><td>String</td><td>用户的唯一标识符</td></tr></tbody></table><h2 id="公共返回对象约定"><a href="#公共返回对象约定" class="headerlink" title="公共返回对象约定"></a>公共返回对象约定</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"responseCode"</span>: [responseCode],</span><br><span class="line">  <span class="attr">"responseInfo"</span>: &#123;</span><br><span class="line">    <span class="attr">"userMessage"</span>: [userMessage],</span><br><span class="line">    <span class="attr">"internalMessage"</span>: [internalMessage],</span><br><span class="line">    <span class="attr">"guideline"</span>: [guideline link]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"link"</span>: </span><br><span class="line">    &#123;</span><br><span class="line"> <span class="attr">"document"</span>:<span class="string">" https://[domain]/docs#zoos"</span>,</span><br><span class="line"> <span class="attr">"href"</span>:[uri-info],</span><br><span class="line"> <span class="attr">"title"</span>:[doc-title],</span><br><span class="line"> <span class="attr">"type"</span>:<span class="string">"application/[vnd.yourformat]+json"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"responseData"</span>:[responseData]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="公共错误编码及说明"><a href="#公共错误编码及说明" class="headerlink" title="公共错误编码及说明"></a>公共错误编码及说明</h2><table><thead><tr><th>code</th><th>描述</th><th>适用范围</th><th>备注</th></tr></thead><tbody><tr><td>20000</td><td>请求成功</td><td>全部</td><td>200表示成功,后两位00是补充编码</td></tr></tbody></table><h2 id="公共数据字典"><a href="#公共数据字典" class="headerlink" title="公共数据字典"></a>公共数据字典</h2><table><thead><tr><th>字段名</th><th>取值</th><th>适用范围</th><th>备注</th></tr></thead><tbody><tr><td>status</td><td>1,2,3</td><td>全部文档</td><td>无</td></tr></tbody></table><h1 id="订单服务"><a href="#订单服务" class="headerlink" title="订单服务"></a>订单服务</h1><h2 id="查询订单列表"><a href="#查询订单列表" class="headerlink" title="查询订单列表"></a>查询订单列表</h2><h3 id="接口规范"><a href="#接口规范" class="headerlink" title="接口规范"></a>接口规范</h3><table><br>  <tr><br>    <th>URL</th><br>    <th colspan="5">/{baseUri}/orders</th><br>  </tr><br>  <tr><br>    <th>HTTP Method</th><br>    <td colspan="5">GET</td><br>  </tr><br>  <tr><br>    <th>访问权限</th><br>    <td colspan="5">基本验证,Https,用户验证</td><br>  </tr><br>  <tr><br>    <th>说明</th><br>    <td colspan="5">查询某个用户的订单列表</td><br>  </tr><br>  <tr><br>    <th rowspan="7"> 请求参数 </th><br>  </tr><br>  <tr><br>    <th>参数名称</th><br>    <th>必须</th><br>    <th>数据类型</th><br>    <th>描述</th><br>    <th>示范</th><br>  </tr><br>  <tr><br>    <td>body.pageSize</td><br>    <td>YES</td><br>    <td>Integer</td><br>    <td>一页的查询条目数</td><br>    <td>默认是10，最大值50</td><br>  </tr><br>  <tr><br>    <td>body.pageNo</td><br>    <td>YES</td><br>    <td>Integer</td><br>    <td>查询的页数</td><br>    <td>默认是1</td><br>  </tr><br>  <tr><br>    <td>body.sortBy</td><br>    <td>NO</td><br>    <td>String</td><br>    <td>参见数据字典,排序规则</td><br>    <td>默认按照时间倒排</td><br>  </tr><br>  <tr><br>    <td>body.from</td><br>    <td>NO</td><br>    <td>String</td><br>    <td>转换为Date,查询范围的开始时间</td><br>    <td>示范:2019-01-01 22:00:00</td><br>  </tr><br>  <tr><br>    <td>body.to</td><br>    <td>NO</td><br>    <td>String</td><br>    <td>转换为Date,查询范围的结束时间</td><br>    <td>示范:2019-01-01 22:00:00</td><br>  </tr><br>  <tr><br>    <th rowspan="10"> 返回参数 </th><br>  </tr><br>  <tr><br>    <td>responseData.pageCount</td><br>    <td>YES</td><br>    <td>Integer</td><br>    <td>一共有多少页</td><br>    <td></td><br>  </tr><br>  <tr><br>    <td>responseData.pageNo</td><br>    <td>YES</td><br>    <td>Integer</td><br>    <td>当前的页数</td><br>    <td></td><br>  </tr><br>  <tr><br>    <td>responseData.data</td><br>    <td>NO</td><br>    <td>JSONObject</td><br>    <td>订单详细信息</td><br>    <td></td><br>  </tr><br></table><h3 id="输入参数示范"><a href="#输入参数示范" class="headerlink" title="输入参数示范"></a>输入参数示范</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">curl -XGET -H "Content-Type: application/json" -H "Access-Token:abcd1234" "https://api-dev.haitao.xiaoyuyu.io/mobile/data-platform/v1/orders/base-orders" -d '&#123;</span><br><span class="line">  "head": [meta-parameters],</span><br><span class="line">  "body": &#123;</span><br><span class="line">    "pageSize":10,</span><br><span class="line">    "pageNo":1</span><br><span class="line">  &#125;</span><br><span class="line">&#125;'</span><br></pre></td></tr></table></figure><h3 id="返回参数示范"><a href="#返回参数示范" class="headerlink" title="返回参数示范"></a>返回参数示范</h3><pre><code class="shell"></code></pre><p><!--<span id="busuanzi_container_page_pv">   阅读量<span id="busuanzi_value_page_pv"></span>次</span>--></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;XXX电子商务平台API文档&lt;/p&gt;
&lt;p&gt;======&lt;/p&gt;
&lt;h1 id=&quot;基础说明&quot;&gt;&lt;a href=&quot;#基础说明&quot; class=&quot;headerlink&quot; title=&quot;基础说明&quot;&gt;&lt;/a&gt;基础说明&lt;/h1&gt;&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;&lt;em&gt;[说明文档用途。]&lt;/em&gt;&lt;br&gt;编写本文的目的是为了将系统功能进行模块化、服务化，将用户的操作以服务的方式提供。系统与系统之间遵循服务规范，将系统与系统之间的交互转为定制化服务交互，以实现系统与系统之间的集成。&lt;/p&gt;
    
    </summary>
    
      <category term="术业专攻" scheme="http://blog.xiaoyuyu.net/categories/%E6%9C%AF%E4%B8%9A%E4%B8%93%E6%94%BB/"/>
    
    
      <category term="模板" scheme="http://blog.xiaoyuyu.net/tags/%E6%A8%A1%E6%9D%BF/"/>
    
      <category term="API" scheme="http://blog.xiaoyuyu.net/tags/API/"/>
    
  </entry>
  
  <entry>
    <title>86-RestAPI设计指南-1-引言</title>
    <link href="http://blog.xiaoyuyu.net/post/46676be6.html"/>
    <id>http://blog.xiaoyuyu.net/post/46676be6.html</id>
    <published>2019-01-13T02:35:21.000Z</published>
    <updated>2019-09-17T02:52:36.347Z</updated>
    
    <content type="html"><![CDATA[<p>类似于阿里巴巴的开发规范或者谷歌的开发规范，API设计是目前很多场景下的基本功，所以这里给出一个笔者的最佳实践(Best Practice).</p><a id="more"></a><h1 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h1><ol><li>引言</li><li>基本的设计原则</li><li>良好的工具和选型</li><li>API的基础</li><li>路径和参数设计</li><li>选择与权衡</li><li>其他最佳实践</li><li>更多的约定</li><li>一个文档规范的示范</li><li>参考文献</li></ol><h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><blockquote><p>REST,即Representataional State Transfer的缩写。关于RESTful架构,可以参考《架构之美》<br>中的定义。</p></blockquote><ul><li>客户端和服务器之间的交互在请求间是无状态的，每个请求都必须包含理解请求的全部信息。</li><li>在此基础上，服务更容易实现分布式，水平扩展，异步处理和可重入(幂等请求)</li></ul><h2 id="REST架构中的基本定义"><a href="#REST架构中的基本定义" class="headerlink" title="REST架构中的基本定义"></a>REST架构中的基本定义</h2><ul><li>资源(Resource): 网络上的所有内容都表述成一个资源，一个实体或者一个具体的信息。它可以是一段文本，一张图片，一首歌曲，或者一种服务。</li><li>统一资源定位符(URI, Universal Resource Identifier): 一个资源的识别符或者说是一个地址，通过URI可以定位到一个唯一的资源，网络上每个资源都有一个唯一的识别符。</li><li>状态转换(State Transfer): 所有资源都共享统一的接口，以便在客户端和服务器之间传输状态。客户端与服务器端互动的过程，通常涉及到服务器端数据和状态变化的过程，比如文件被修改，访问数量增加等。</li><li>使用基本的HTTP请求方法<ul><li>GET: 获取资源(幂等并且安全的)。</li><li>POST: 新建资源</li><li>PUT: 更新资源</li><li>DELETE: 删除动作</li></ul></li><li>Hypermedia: 应用程序状态的引擎，实现hypermeida是API的最佳实践之一，可以参考api.github.com，后文也会再讲到。</li></ul><h1 id="基本的设计原则"><a href="#基本的设计原则" class="headerlink" title="基本的设计原则"></a>基本的设计原则</h1><h2 id="协议-Protocol"><a href="#协议-Protocol" class="headerlink" title="协议(Protocol)"></a>协议(Protocol)</h2><p>API与客户端通信的协议，应该尽量使用HTTPs。除此之外，白名单机制，VPN可以提高更多安全性。遵循<strong>“所有人应该知道他所需要完成工作必备的最少的知识”</strong>的原则。而一个接口，只有在访问者必须使用它时，才告诉这个访问者。</p><h2 id="域名-Domain"><a href="#域名-Domain" class="headerlink" title="域名(Domain)"></a>域名(Domain)</h2><p>应该将API部署到专用域名之下。好处显而易见。  </p><ul><li>更容易做动静分离。</li><li>更容易做服务降级和限流。</li><li>更容易做到高吞吐量。</li><li>更容易做流量分发。</li><li>更容易进行之后的水平扩展和服务拆分。</li></ul><blockquote><p>Sample: <strong><em><a href="https://api.groupname.domain.io/" target="_blank" rel="noopener">https://api.groupname.domain.io/</a></em></strong></p></blockquote><p>更好的实践是，将服务分组，并且根据情况进行必要的层次和分组(group)。这里的group可以包含事业部，也可以包含不同的客户，更可以包含不同的层次。</p><p><strong>规范: <a href="https://api.[service-group].domain.io/" target="_blank" rel="noopener">https://api.[service-group].domain.io/</a></strong></p><h2 id="基本URL-Root-URL"><a href="#基本URL-Root-URL" class="headerlink" title="基本URL(Root URL)"></a>基本URL(Root URL)</h2><p>基本的URL，在此文中指的是除了服务拆分之外的URL，这里的最佳实践是，可以包含环境，版本，分类，层次等，但是一个基本的URL，已经能决定除了接口或者服务粒度以外的所有事情。或者说，他可以决定，由一个作战单元（个人或者小的敏捷团队）日常维护的工作内容了。</p><blockquote><p>Sample: <strong><a href="https://api-dev.groupname.domain.io/mobile/v1/comment/[...]" target="_blank" rel="noopener">https://api-dev.groupname.domain.io/mobile/v1/comment/[...]</a></strong>   </p></blockquote><ul><li>此处dev表示开发环境(这里的api默认表示生产,api-dev表示开发，职责仍然是唯一的)</li><li>groupname表示分组(可以包含更多层次信息或者更多分层,但是最佳实践是一般domain不超过两层,也可以默认约定.io域名后缀全部是为api部署服务)</li><li>mobile表示面向移动端</li><li>v1表示本类的接口版本</li><li>comment表示此本类服务为评论服务</li></ul><h2 id="环境划分原则-Env"><a href="#环境划分原则-Env" class="headerlink" title="环境划分原则(Env)"></a>环境划分原则(Env)</h2><p>整体服务架构的划分原则不在此文档讨论范围之内，而一个最佳实践是,在domain当中就对环境做区分。</p><p><strong>规范: <a href="https://api-[envname].groupname.domain.io/" target="_blank" rel="noopener">https://api-[envname].groupname.domain.io/</a></strong></p><h2 id="接口的版本-API-Version"><a href="#接口的版本-API-Version" class="headerlink" title="接口的版本(API Version)"></a>接口的版本(API Version)</h2><p>应该将API的版本号放入URL合适的层次。注意这里的Version即不表示客户端的版本，亦不表示服务器中服务的对应版本，而是特指该接口的版本。一般用来处理对接口做升级的情况。</p><p><strong>规范: <a href="https://api-[env-name].groupname.domain.io/mobile/[version]/" target="_blank" rel="noopener">https://api-[env-name].groupname.domain.io/mobile/[version]/</a></strong></p><ul><li>v1和v2的区别，应该表示且仅表示接口的区别。</li><li>不要发布无版本号的接口。</li><li>使用简单的数字。</li><li>服务分组加版本两个变量来共同决定接口的实现逻辑。</li></ul><h2 id="路径-EndPoints-端点-命名"><a href="#路径-EndPoints-端点-命名" class="headerlink" title="路径(EndPoints,端点)命名"></a>路径(EndPoints,端点)命名</h2><blockquote><p>此原则仅供参考。准备重写。<br>路径表示API的具体URL,每个URL唯一的表示一种资源。所以网址中不应该有动词，只应该有名词。而且所用的名词往往与代表的对象名称对应，一般来说某一种记录的集合，所以API名词当中应该使用复数。</p></blockquote><ul><li>URL: /cards/getCardById/{id}  =&gt; HTTP GET: /cards/{id}</li><li>如果某些动作是HTTP动词表达不了的，那么应该把动作当成资源去处理。<ul><li>POST /accounts/1/transfer/500/to/2/ =&gt; POST /transaction?from=1&amp;to=2&amp;amount=500.00</li></ul></li><li>为了保持简单，只对所有资源使用复数。<ul><li>/setting =&gt; /settings</li><li>/user =&gt; /users</li></ul></li><li>资源之间的层级关系应该表述清楚。<ul><li>GET /hotels/1312/homes/ 返回酒店1312的所有房间。</li><li>GET /hotels/1312/homes/1209 返回酒店1312的1209房间。</li></ul></li></ul><h2 id="HTTP动词-HTTP-Verbs"><a href="#HTTP动词-HTTP-Verbs" class="headerlink" title="HTTP动词(HTTP Verbs)"></a>HTTP动词(HTTP Verbs)</h2><ul><li>GET (SELECT): 从服务器取出对应的资源。</li><li>POST (CREATE): 新建一个资源。</li><li>PUT (UPDATE): 在服务器更新资源。(客户端提供改变后的完整的资源,所以应该少用)</li><li>PATCH (UPDATE): 在服务器更新资源。(客户端提供改变的属性)</li><li>DELETE (DELETE): 删除资源。</li><li>HEAD: 获取资源的元数据。</li><li>OPTIONS: 获取信息，关于哪些资源的哪些属性是客户端可以改变的。</li></ul><h3 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h3><ul><li>此处的最佳实践是，大家约定好我们的动作处理原则，并且在整个系统（组织或者公司）内保持统一。</li><li>GET方法不应该涉及状态改变。</li><li>很多时候我们还需要收集客户端的信息,但是REST本身是无状态的，所以收集的时候，应该独立于REST API的设计原则，独立设计体系来收集类似于Client, cookie, ip和device等信息。</li></ul><h2 id="不符合CRUD的情况"><a href="#不符合CRUD的情况" class="headerlink" title="不符合CRUD的情况"></a>不符合CRUD的情况</h2><p>一般有如下建议</p><ul><li>使用POST 重构行为的action</li><li>增加控制参数(整体来约定)</li><li>把动作转换成资源</li></ul><h2 id="过滤信息-Filtering"><a href="#过滤信息-Filtering" class="headerlink" title="过滤信息(Filtering)"></a>过滤信息(Filtering)</h2><p>API应该提供参数，过滤返回结果。因为服务器端某个资源数量可能很多。比如用户的订单数，全国的酒店数等。过滤的语义应该包括对数据集合的过滤，排序，选择，和分页等功能。</p><ul><li>?limit=10: 返回指定条目的数据。</li><li>?offset=10: 指定返回记录的开始位置。</li><li>?pageNumber=2&amp;perSize=100: 指定第几页，以及每页的记录数量。</li><li>?sortBy=time&amp;order=desc: 排序顺序及属性。</li><li>?type=1: 指定筛选条件。</li></ul><h3 id="最佳实践："><a href="#最佳实践：" class="headerlink" title="最佳实践："></a>最佳实践：</h3><ul><li>实际上，我们在处理API业务时，不可能像数据库查询那么简洁容易。所以参数定义应该更加单一职责，更加严谨。</li><li>总是可以在输入参数中设计一个客户端需要的attrList, 由使用者来指定需要的属性列表。</li><li>参数的设计上应该允许冗余。</li><li>可以使用HTTP的定制头: X-Total-Count表示资源总数。</li></ul><h2 id="状态码-Status-Codes"><a href="#状态码-Status-Codes" class="headerlink" title="状态码(Status Codes)"></a>状态码(Status Codes)</h2><ul><li>这里一般实践是包含两层，一层是中间件(比如网关，nginx，tomcat)返回的HTTP请求本身的状态码。另外还包含服务本身返回的状态码设计。  </li><li>这里需要单独开辟一个章节来定义状态码，后文会给出一个最佳实践。</li><li><strong>一个好的可以坚持的原则是，服务本身返回的状态码的前缀，应该和网关那一层保持一致。这样可以有最好的层次关系。</strong>. </li><li>比如40001表示请求参数错误，其中400表示INVALID REQUEST。01表示具体的错误为参数错误。</li></ul><h2 id="错误处理-Error-Handling"><a href="#错误处理-Error-Handling" class="headerlink" title="错误处理(Error Handling)"></a>错误处理(Error Handling)</h2><p>如果状态码不是正确的返回，就应该返回出错信息。尽量使用详细的错误信息。<br>一个好的实践是，出错信息应该包含:<br>userMessage: 显示给用户的。<br>internalMessage: 显示给程序员调试用的。<br>code: 编码<br>guideline: 参考解决指南。</p><h2 id="返回结果-Response"><a href="#返回结果-Response" class="headerlink" title="返回结果(Response)"></a>返回结果(Response)</h2><ul><li>按照RESTful架构<strong>“宽进严出”</strong>的原则，返回应该被严格定义。</li><li>全部使用JSON返回结构。</li><li>基本约定:<ul><li>GET /collection: 返回资源列表 </li><li>GET /collection/resource: 返回单个对象</li><li>POST /collection/resource: 返回新生成的对象。</li><li>PUT /collection/resource: 返回完整的更新后的资源对象。</li><li>PATCH /collection/resource: 返回完整的更新后的资源对象。</li><li>DELETE /collection/resource: 返回一个空文档。</li></ul></li><li>实际执行过程中远比这个复杂，但是我们仍然可以有一些基本原则。</li></ul><h2 id="使用HATEOAS构建Hypermedia-APIs"><a href="#使用HATEOAS构建Hypermedia-APIs" class="headerlink" title="使用HATEOAS构建Hypermedia APIs"></a>使用HATEOAS构建Hypermedia APIs</h2><p>超媒体API很可能是RESTful API设计的未来。它们实际上是一个非常惊人的概念，可以追溯到HTTP和HTML的工作原理。我们可以使用HATEOAS in Spring来构建Hypermedia APIs,而在此之前，约定更加重要。</p><p>一个好的Hypermedia范例是 <a href="api.github.com">api.github.com</a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"current_user_url"</span>: <span class="string">"https://api.github.com/user"</span>,</span><br><span class="line">  <span class="attr">"current_user_authorizations_html_url"</span>: <span class="string">"https://github.com/settings/connections/applications&#123;/client_id&#125;"</span>,</span><br><span class="line">  <span class="attr">"authorizations_url"</span>: <span class="string">"https://api.github.com/authorizations"</span>,</span><br><span class="line">  <span class="attr">"code_search_url"</span>: <span class="string">"https://api.github.com/search/code?q=&#123;query&#125;&#123;&amp;page,per_page,sort,order&#125;"</span>,</span><br><span class="line">  <span class="attr">"commit_search_url"</span>: <span class="string">"https://api.github.com/search/commits?q=&#123;query&#125;&#123;&amp;page,per_page,sort,order&#125;"</span>,</span><br><span class="line">  <span class="attr">"emails_url"</span>: <span class="string">"https://api.github.com/user/emails"</span>,</span><br><span class="line">  <span class="attr">"emojis_url"</span>: <span class="string">"https://api.github.com/emojis"</span>,</span><br><span class="line">  <span class="attr">"events_url"</span>: <span class="string">"https://api.github.com/events"</span>,</span><br><span class="line">  <span class="attr">"feeds_url"</span>: <span class="string">"https://api.github.com/feeds"</span>,</span><br><span class="line">  <span class="attr">"followers_url"</span>: <span class="string">"https://api.github.com/user/followers"</span>,</span><br><span class="line">  <span class="attr">"following_url"</span>: <span class="string">"https://api.github.com/user/following&#123;/target&#125;"</span>,</span><br><span class="line">  <span class="attr">"gists_url"</span>: <span class="string">"https://api.github.com/gists&#123;/gist_id&#125;"</span>,</span><br><span class="line">  <span class="attr">"hub_url"</span>: <span class="string">"https://api.github.com/hub"</span>,</span><br><span class="line">  <span class="attr">"issue_search_url"</span>: <span class="string">"https://api.github.com/search/issues?q=&#123;query&#125;&#123;&amp;page,per_page,sort,order&#125;"</span>,</span><br><span class="line">  <span class="attr">"issues_url"</span>: <span class="string">"https://api.github.com/issues"</span>,</span><br><span class="line">  <span class="attr">"keys_url"</span>: <span class="string">"https://api.github.com/user/keys"</span>,</span><br><span class="line">  <span class="attr">"notifications_url"</span>: <span class="string">"https://api.github.com/notifications"</span>,</span><br><span class="line">  <span class="attr">"organization_repositories_url"</span>: <span class="string">"https://api.github.com/orgs/&#123;org&#125;/repos&#123;?type,page,per_page,sort&#125;"</span>,</span><br><span class="line">  <span class="attr">"organization_url"</span>: <span class="string">"https://api.github.com/orgs/&#123;org&#125;"</span>,</span><br><span class="line">  <span class="attr">"public_gists_url"</span>: <span class="string">"https://api.github.com/gists/public"</span>,</span><br><span class="line">  <span class="attr">"rate_limit_url"</span>: <span class="string">"https://api.github.com/rate_limit"</span>,</span><br><span class="line">  <span class="attr">"repository_url"</span>: <span class="string">"https://api.github.com/repos/&#123;owner&#125;/&#123;repo&#125;"</span>,</span><br><span class="line">  <span class="attr">"repository_search_url"</span>: <span class="string">"https://api.github.com/search/repositories?q=&#123;query&#125;&#123;&amp;page,per_page,sort,order&#125;"</span>,</span><br><span class="line">  <span class="attr">"current_user_repositories_url"</span>: <span class="string">"https://api.github.com/user/repos&#123;?type,page,per_page,sort&#125;"</span>,</span><br><span class="line">  <span class="attr">"starred_url"</span>: <span class="string">"https://api.github.com/user/starred&#123;/owner&#125;&#123;/repo&#125;"</span>,</span><br><span class="line">  <span class="attr">"starred_gists_url"</span>: <span class="string">"https://api.github.com/gists/starred"</span>,</span><br><span class="line">  <span class="attr">"team_url"</span>: <span class="string">"https://api.github.com/teams"</span>,</span><br><span class="line">  <span class="attr">"user_url"</span>: <span class="string">"https://api.github.com/users/&#123;user&#125;"</span>,</span><br><span class="line">  <span class="attr">"user_organizations_url"</span>: <span class="string">"https://api.github.com/user/orgs"</span>,</span><br><span class="line">  <span class="attr">"user_repositories_url"</span>: <span class="string">"https://api.github.com/users/&#123;user&#125;/repos&#123;?type,page,per_page,sort&#125;"</span>,</span><br><span class="line">  <span class="attr">"user_search_url"</span>: <span class="string">"https://api.github.com/search/users?q=&#123;query&#125;&#123;&amp;page,per_page,sort,order&#125;"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="标准请求定义"><a href="#标准请求定义" class="headerlink" title="标准请求定义"></a>标准请求定义</h2><p>标准的请求定义当中有很多最佳实践，比如Content-Type等等。好的实践是，我们早早的用很小的代价把content-type, language这些加入设计当中，可以避免后续很多问题。后文会给出最佳实践。我们也需要看看,HTTP请求当中，到底包含了哪些东西。</p><h2 id="认证-Authentication"><a href="#认证-Authentication" class="headerlink" title="认证(Authentication)"></a>认证(Authentication)</h2><p>认证的时候取决于API的使用者和生产者之间的关系，以及需要保护的程度。目前此处的最佳实践是采用OAuth 2.0当中合适的模式来构建。</p><h2 id="文档-Documentation"><a href="#文档-Documentation" class="headerlink" title="文档(Documentation)"></a>文档(Documentation)</h2><p>使用Swagger API+JSON，进行文档管理和信息描述。定义一个标准的，语言无关的，供人和计算机理解服务的文档。类似于SOAP当中的WSDL。</p><ul><li>需要满足API自动生成同步的在线文档。</li><li>可以用于API设计review。</li><li>方便测试人员了解API定义。</li><li>可以作为客户产品文档的一部分进行发布。</li><li>可以通过API Swagger文档生成使用者和生产者的骨架代码。</li><li>由于API的灵活性，此处一般不做严格要求。</li></ul><h1 id="一个文档规范示范"><a href="#一个文档规范示范" class="headerlink" title="一个文档规范示范"></a>一个文档规范示范</h1><p><!--<span id="busuanzi_container_page_pv">   阅读量<span id="busuanzi_value_page_pv"></span>次</span>--></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;类似于阿里巴巴的开发规范或者谷歌的开发规范，API设计是目前很多场景下的基本功，所以这里给出一个笔者的最佳实践(Best Practice).&lt;/p&gt;
    
    </summary>
    
      <category term="术业专攻" scheme="http://blog.xiaoyuyu.net/categories/%E6%9C%AF%E4%B8%9A%E4%B8%93%E6%94%BB/"/>
    
    
      <category term="技术专题" scheme="http://blog.xiaoyuyu.net/tags/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/"/>
    
      <category term="API" scheme="http://blog.xiaoyuyu.net/tags/API/"/>
    
      <category term="设计指南" scheme="http://blog.xiaoyuyu.net/tags/%E8%AE%BE%E8%AE%A1%E6%8C%87%E5%8D%97/"/>
    
      <category term="Rest" scheme="http://blog.xiaoyuyu.net/tags/Rest/"/>
    
      <category term="微服务" scheme="http://blog.xiaoyuyu.net/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>84-github配置当中遇到的一个小坑</title>
    <link href="http://blog.xiaoyuyu.net/post/87088a2b.html"/>
    <id>http://blog.xiaoyuyu.net/post/87088a2b.html</id>
    <published>2019-01-06T03:05:33.000Z</published>
    <updated>2019-09-17T02:52:36.347Z</updated>
    
    <content type="html"><![CDATA[<p>明明已经在github配置了sshkey，却还是提示没有权限。。</p><a id="more"></a><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Cloning into 'XXXX'...</span><br><span class="line">Username for 'https://github.com': shengl</span><br><span class="line">Password for 'https://shengl@github.com': </span><br><span class="line">remote: Password authentication is not available for Git operations.</span><br><span class="line">remote: You must use a personal access token or SSH key.</span><br><span class="line">remote: See https://github.com/settings/tokens or https://github.com/settings/ssh</span><br><span class="line">fatal: unable to access 'https://github.com/XXXX/XXXX': The requested URL returned error: 403</span><br></pre></td></tr></table></figure><h1 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h1><ul><li>首先查看<a href="https://github.com/settings/ssh" target="_blank" rel="noopener">https://github.com/settings/ssh</a> 的sshkey配置，确认是可用的ssh key，并且查看本地的sshkey是否一致 </li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.ssh/shengl-github.pub</span><br></pre></td></tr></table></figure><ul><li>再次clone，仍然是同样的报错</li><li>校验配置 ,返回如下 </li></ul><blockquote><p>ssh -vT <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a> </p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">Are you sure you want to continue connecting (yes/no)? yes</span><br><span class="line">...</span><br><span class="line">debug1: No more authentication methods to try.</span><br><span class="line">git@github.com: Permission denied (publickey).</span><br></pre></td></tr></table></figure><ul><li>找到原因，当前ssh key未被启用,启动私钥即可</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-add ~/.ssh/shengl-github</span><br><span class="line">Identity added: /Users/shengl/.ssh/shengl-github (/Users/shengl/.ssh/shengl-github)</span><br></pre></td></tr></table></figure><ul><li>再次运行校验配置 ssh -vT <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a> 则已经成功。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">Are you sure you want to continue connecting (yes/no)? yes</span><br><span class="line">...</span><br><span class="line">debug1: client_input_channel_req: channel 0 rtype exit-status reply 0</span><br><span class="line">Hi shengl! You've successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure><ul><li>注意，此时应该使用git协议拷贝代码</li></ul><blockquote><p>git clone <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:<em>[org-name]/[project-name]</em>.git</p></blockquote><p><!--<span id="busuanzi_container_page_pv">   阅读量<span id="busuanzi_value_page_pv"></span>次</span>--></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;明明已经在github配置了sshkey，却还是提示没有权限。。&lt;/p&gt;
    
    </summary>
    
      <category term="术业专攻" scheme="http://blog.xiaoyuyu.net/categories/%E6%9C%AF%E4%B8%9A%E4%B8%93%E6%94%BB/"/>
    
    
      <category term="github" scheme="http://blog.xiaoyuyu.net/tags/github/"/>
    
      <category term="git" scheme="http://blog.xiaoyuyu.net/tags/git/"/>
    
      <category term="问题解决" scheme="http://blog.xiaoyuyu.net/tags/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
    
  </entry>
  
  <entry>
    <title>81-工具集合-持续更新</title>
    <link href="http://blog.xiaoyuyu.net/post/ae403e3a.html"/>
    <id>http://blog.xiaoyuyu.net/post/ae403e3a.html</id>
    <published>2018-11-04T14:34:06.000Z</published>
    <updated>2019-09-17T02:52:36.347Z</updated>
    
    <content type="html"><![CDATA[<p>工具和模板可以沉淀方法。方法论可以指导工具的使用。好的工具和方法对于我们缺一不可。</p><p>工具，模板和模型，方法论是三个层面上，但是相辅相成的东西。如何合理的应用决定了我们的效率和结果。</p><a id="more"></a><blockquote><p>后续我会准备一个更详细的思维导图。涵盖各个方面。</p></blockquote><h1 id="常规工具"><a href="#常规工具" class="headerlink" title="常规工具"></a>常规工具</h1><ul><li>财务记账: 随手记</li><li>万金油: Excel</li></ul><h1 id="时间管理-amp-精力管理"><a href="#时间管理-amp-精力管理" class="headerlink" title="时间管理&amp;精力管理"></a>时间管理&amp;精力管理</h1><ul><li>任务管理和追踪: teambition</li><li>时间管理&amp;智能提醒: 滴答清单</li><li>时间review: 34coins, 正准备写一篇34金币管理法相关的文章。</li><li>任务管理+智能提醒+追踪+时间管理: 奇妙清单,参见<a href="https://blog.xiaoyuyu.net/post/500a18f1.html">《79-时间管理系列-工具-奇妙清单》</a></li></ul><h1 id="知识管理"><a href="#知识管理" class="headerlink" title="知识管理"></a>知识管理</h1><ul><li>网盘: 好像只剩下百度云了，如果有条件，可以用google drive。</li><li>协作: google doc系列绝对好用。是word + 协作的升级版。</li><li>知识库和笔记: 还是推荐有道云笔记吧。</li></ul><h1 id="Mac下常规的工具说明"><a href="#Mac下常规的工具说明" class="headerlink" title="Mac下常规的工具说明"></a>Mac下常规的工具说明</h1><ul><li>Markdown编辑器: MacDown</li><li>思维导图工具: MindMaster</li><li>文本编辑器: Sublime</li><li>浏览器: Chrome, Firefox</li><li>记事本: 系统自带备忘录</li></ul><p>… TODO 未完待续。</p><p><!--<span id="busuanzi_container_page_pv">   阅读量<span id="busuanzi_value_page_pv"></span>次</span>--></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;工具和模板可以沉淀方法。方法论可以指导工具的使用。好的工具和方法对于我们缺一不可。&lt;/p&gt;
&lt;p&gt;工具，模板和模型，方法论是三个层面上，但是相辅相成的东西。如何合理的应用决定了我们的效率和结果。&lt;/p&gt;
    
    </summary>
    
      <category term="术与道" scheme="http://blog.xiaoyuyu.net/categories/%E6%9C%AF%E4%B8%8E%E9%81%93/"/>
    
    
      <category term="方法论" scheme="http://blog.xiaoyuyu.net/tags/%E6%96%B9%E6%B3%95%E8%AE%BA/"/>
    
      <category term="工具" scheme="http://blog.xiaoyuyu.net/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="技术专题" scheme="http://blog.xiaoyuyu.net/tags/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/"/>
    
      <category term="奇技淫巧" scheme="http://blog.xiaoyuyu.net/tags/%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>79-时间管理系列-工具-奇妙清单</title>
    <link href="http://blog.xiaoyuyu.net/post/500a18f1.html"/>
    <id>http://blog.xiaoyuyu.net/post/500a18f1.html</id>
    <published>2018-11-03T13:17:56.000Z</published>
    <updated>2019-09-17T02:52:36.345Z</updated>
    
    <content type="html"><![CDATA[<p>一直在尝试各种时间管理工具和任务管理工具，而且比较确定要把他们三者合为一。  </p><ul><li>任务管理, teambition比较好。</li><li>智能提醒, 滴答清单做的不错。</li><li>任务和时间review,最好用的是34coins。</li></ul><a id="more"></a><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><blockquote><p>为什么我们需要时间和精力&amp;任务管理?</p></blockquote><ul><li>随着事情的增多，在努力的基础上，如何合理的规划时间，最大化利用你的时间？学生时代我就会用作息时间表来合理的规划时间。方法和努力一样重要。</li><li>你总是会忘记很多琐事，而有时候会因为琐事忘了重要的事情。</li><li>好的任务管理可以帮助你梳理思路，分清主次。</li><li>好的智能提醒或者日程工具可以减少你的精力消耗，让你更聚焦于核心事务。</li></ul><blockquote><p>为什么最先写的是奇妙清单?</p></blockquote><ul><li>笔者在探索将序言中3者功能整合起来的最佳方式，同时应该用合理的精力去管理。之前用了一年多的滴答清单，发现效率还不如34coins更高。但是34coins对任务管理并不友好，所以在权衡这两者之间的关系。</li></ul><h1 id="初识奇妙清单"><a href="#初识奇妙清单" class="headerlink" title="初识奇妙清单?"></a>初识奇妙清单?</h1><ul><li>对于大多数人来说，应该让任务管理变得更容易，但是不需要复杂的层次和设计逻辑。否则容易本末倒置。毕竟我们个人的管理不需要协同。所以jira不合适的。</li><li>需要降低它的使用门槛。</li><li>它的层次结构是： 文件夹-&gt;清单列表-&gt;清单项目-&gt;子任务。 同时它会将星标的和当天任务，当周任务都抽离出来，自动整合。所以这里就兼具了针对各种主题规划任务（可能是一年的），但是自动归纳到每天的执行流程中（当天任务，当周任务）。对大多数人来说，已经足够用了。</li><li>所有平台都有，所以我的安卓手机，苹果手机，笔记本，公司电脑，浏览器，微信公众号。都能用。</li><li>他还具备了对于普通家庭和朋友协作足够使用的协同功能。</li><li>至少，我现在可以把他的任务管理（规划）和智能提醒结合起来了。</li></ul><h1 id="基本教程"><a href="#基本教程" class="headerlink" title="基本教程"></a>基本教程</h1><h1 id="一些原则"><a href="#一些原则" class="headerlink" title="一些原则"></a>一些原则</h1><ul><li>用标签可以来标志不同清单项之间的联系。</li><li>给任务加上 「#重要紧急」、「#重要不紧急」、「#紧急不重要」，「#不紧急不重要」等标签，然后可以用搜索来筛选。</li><li>应该定义一个清单创建的规则，包括命名规则，时间规则，正文规则，标签规则，优先级规则。方便统一整合。</li></ul><h1 id="创建任务的技巧"><a href="#创建任务的技巧" class="headerlink" title="创建任务的技巧"></a>创建任务的技巧</h1><h2 id="可以直接发送邮件"><a href="#可以直接发送邮件" class="headerlink" title="可以直接发送邮件"></a>可以直接发送邮件</h2><ul><li>第一次发送邮件，会收到回复‘启用此帐户的“电邮至奇妙清单”功能。’，点击确认。</li><li>发送邮件到 <a href="mailto:me@wunderlist.com" target="_blank" rel="noopener">me@wunderlist.com</a>。</li><li>清单项目会加入到「收件箱」清单。</li><li>邮件主题会生成清单标题。</li><li>邮件正文会生成备注。</li></ul><center><img src="/img/2018/2018-11-03-01.png" alt="发送邮件"> </center><br><center>图1 发送邮件</center><center><img src="/img/2018/2018-11-03-02.png" alt="发送邮件"> </center><br><center>图2 清单创建效果</center><h2 id="使用浏览器插件"><a href="#使用浏览器插件" class="headerlink" title="使用浏览器插件"></a>使用浏览器插件</h2><ul><li>直接访问<a href="https://chrome.google.com/webstore/detail/wunderlist-new-tab/fgikemaeelgbhjnhnnahcpkjpafaeion" target="_blank" rel="noopener">奇妙清单的Chrome新标签页扩展插件</a></li><li>安装完成后登陆。</li><li>直接打开新的标签页即可添加任务，并且选择加入的清单文件夹。</li></ul><center><img src="/img/2018/2018-11-03-03.png" alt="浏览器插件，新标签创建任务"> </center><br><center>图3 使用浏览器插件，新标签创建任务</center><h2 id="使用addon工具"><a href="#使用addon工具" class="headerlink" title="使用addon工具"></a>使用addon工具</h2><ul><li>直接访问<a href="https://chrome.google.com/webstore/detail/add-to-wunderlist/dmnddeddcgdllibmaodanoonljfdmooc?hl=en" target="_blank" rel="noopener">奇妙清单的add on插件</a></li><li>安装后chrome的右上角会有对应的插件图标。</li></ul><center><img src="/img/2018/2018-11-03-04.png" alt="使用浏览器Addon插件"> </center><br><center>图4 使用浏览器Addon插件</center><h2 id="使用ios的分享功能"><a href="#使用ios的分享功能" class="headerlink" title="使用ios的分享功能"></a>使用ios的分享功能</h2><ul><li>只要在系统分享设置中打开“奇妙清单”，即可随时将文章，网页或者应用分享到“随后阅读”清单。你也可以自行设置。</li><li>这个功能真的很有利于你将碎片化时间整合起来。</li></ul><center><img src="/img/2018/2018-11-03-05.png" alt="分享设置,以UC浏览器为例"> </center><br><center>图5 分享设置,以UC浏览器为例</center> <h1 id="效率提升"><a href="#效率提升" class="headerlink" title="效率提升"></a>效率提升</h1><h2 id="将奇妙清单同步到日历"><a href="#将奇妙清单同步到日历" class="headerlink" title="将奇妙清单同步到日历"></a>将奇妙清单同步到日历</h2><ul><li>账户设置-&gt;日历提要-&gt;连接。</li><li>即可识别并且同步任务到日历。你可以设置为每天同步。</li><li>上面首先会识别系统的日历订阅地址，理论上应该也可以同步到google calendar。不过用了奇妙清单，我应该不会再用google calendar了。</li></ul><h2 id="使用标签功能，做跨清单列表的筛选"><a href="#使用标签功能，做跨清单列表的筛选" class="headerlink" title="使用标签功能，做跨清单列表的筛选"></a>使用标签功能，做跨清单列表的筛选</h2><ul><li>你可以给每个任务项目加上若干标签，然后通过搜索功能中标签视图查看该标签下的所有事项。</li></ul><h2 id="智能清单设置"><a href="#智能清单设置" class="headerlink" title="智能清单设置"></a>智能清单设置</h2><ul><li>系统默认提供了「全部」，「已完成」，「本周」，「今天」，「星标任务」，「分配给我」这6个智能清单。他们会自动聚合各个对应的任务。</li><li>每个聚合清单都有「自动」，「隐藏」，「可见」等三个选项。</li><li>建议选项:<ul><li>「全部」，「已完成」设置为隐藏，因为一般只有回顾的时候才会用到这两个清单。</li><li>星标任务应该保持一直可见，用它来管理优先级最好不过。视情况，你还可以给标签按照四象限管理法则来管理。给任务加上 「#重要紧急」、「#重要不紧急」、「#紧急不重要」，「#不紧急不重要」等标签，然后可以用搜索来筛选。</li></ul></li></ul><h2 id="通用设置"><a href="#通用设置" class="headerlink" title="通用设置"></a>通用设置</h2><ul><li>建议将添加任务到清单顶部，Dock上的角标显示到期&amp;逾期的任务。</li></ul><h1 id="更进一步"><a href="#更进一步" class="headerlink" title="更进一步"></a>更进一步</h1><ul><li>清单列表分为两类。一类是系统根据任务属性智能聚合出来的清单。一类是自己创建的。</li><li>在创建清单清单之前，我已经画出了一个完整的关于家庭生活的思维导图。在此基础上，分门别类的包括了投资，财务，健康医疗，工作，学习等方方面面，根据这样一个思维导图，你可以更好的归纳整理你的日常生活。也可以更好的创建清单。</li><li>如果一个清单列表会存在大于3个月才创建，否则，可以放在「收件箱」或者杂项里面。适当的归类，让每个清单里面有合理数量（一个电脑屏幕或者两～三页手机屏幕可以显示下来）。</li><li>可以尝试用标签来解决分类的问题。</li><li>每天都要完成的事情，重复高效的完成它。我已经用奇妙清单将每天的时间分为了13个时间段，建立了一个「每周schedule」的清单，这个相当于一个作息时间表。然后我要做的，是拿清单中的任务去填满每一天。</li><li>每天要设置一些整块的时间，去完成一些专项活动。这些专项活动，可以是你清单中那些重要的，关键的事情。每周的整块时间内容可以不一样。</li><li>每月的事项同样也可以归纳出来，作为一个清单存在。比如每月的信用卡还款，投资计划，每月财务review，健身，爬山，采购。。等等。</li><li>建立一个清单的建立规则。至少包括”到期日”，重复频率，提醒时间等。</li><li>回顾你的清单。审视你的未完成事项。</li><li>这里我采用了34coins的方法论，来建立我的每天的日常清单。所以目前两者还没有完全结合，只能依赖我的执行了。：）</li></ul><p><!--<span id="busuanzi_container_page_pv">   阅读量<span id="busuanzi_value_page_pv"></span>次</span>--></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一直在尝试各种时间管理工具和任务管理工具，而且比较确定要把他们三者合为一。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;任务管理, teambition比较好。&lt;/li&gt;
&lt;li&gt;智能提醒, 滴答清单做的不错。&lt;/li&gt;
&lt;li&gt;任务和时间review,最好用的是34coins。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="术与道" scheme="http://blog.xiaoyuyu.net/categories/%E6%9C%AF%E4%B8%8E%E9%81%93/"/>
    
    
      <category term="工具" scheme="http://blog.xiaoyuyu.net/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="奇技淫巧" scheme="http://blog.xiaoyuyu.net/tags/%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>78-ElasticSearch组合实现pinyin中文分词及自动补全</title>
    <link href="http://blog.xiaoyuyu.net/post/dd5c815a.html"/>
    <id>http://blog.xiaoyuyu.net/post/dd5c815a.html</id>
    <published>2018-10-29T15:48:59.000Z</published>
    <updated>2019-09-17T02:52:36.345Z</updated>
    
    <content type="html"><![CDATA[<p>需要组合Elastic Search的中文分词，拼音，自动补全，错别字或者英文拼写错误等功能。还要支持热点词。</p><a id="more"></a><h1 id="IK中文分词"><a href="#IK中文分词" class="headerlink" title="IK中文分词"></a>IK中文分词</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote><p>./bin/elasticsearch-plugin install <a href="https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v5.5.3/elasticsearch-analysis-ik-5.5.3.zip" target="_blank" rel="noopener">https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v5.5.3/elasticsearch-analysis-ik-5.5.3.zip</a> # 需要安装和es对应一致的IK版本。</p></blockquote><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>ik的配置文件位置在 es/config/analysis-ik<br>vim IKAnalyzer.cfg.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">comment</span>&gt;</span>IK Analyzer 扩展配置<span class="tag">&lt;/<span class="name">comment</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--用户可以在这里配置自己的扩展字典 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"ext_dict"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!--用户可以在这里配置自己的扩展停止词字典--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"ext_stopwords"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--用户可以在这里配置远程扩展字典 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;entry key="remote_ext_dict"&gt;words_location&lt;/entry&gt; --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--用户可以在这里配置远程扩展停止词字典--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;entry key="remote_ext_stopwords"&gt;words_location&lt;/entry&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><h3 id="测试分词器效果"><a href="#测试分词器效果" class="headerlink" title="测试分词器效果"></a>测试分词器效果</h3><ul><li>ik_max_word: 尽量多的分词</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl -XGET 'http://localhost:9200/_analyze/?pretty' -d '&#123;</span><br><span class="line">  "analyzer":"ik_max_word",</span><br><span class="line">  "text":"中华人民共和国国歌"</span><br><span class="line">&#125;'</span><br></pre></td></tr></table></figure><ul><li>返回值如下</li></ul><pre>{  "tokens" : [    {      "token" : "中华人民共和国",      "start_offset" : 0,      "end_offset" : 7,      "type" : "CN_WORD",      "position" : 0    },    {      "token" : "中华人民",      "start_offset" : 0,      "end_offset" : 4,      "type" : "CN_WORD",      "position" : 1    },    {      "token" : "中华",      "start_offset" : 0,      "end_offset" : 2,      "type" : "CN_WORD",      "position" : 2    },    {      "token" : "华人",      "start_offset" : 1,      "end_offset" : 3,      "type" : "CN_WORD",      "position" : 3    },    {      "token" : "人民共和国",      "start_offset" : 2,      "end_offset" : 7,      "type" : "CN_WORD",      "position" : 4    },    {      "token" : "人民",      "start_offset" : 2,      "end_offset" : 4,      "type" : "CN_WORD",      "position" : 5    },    {      "token" : "共和国",      "start_offset" : 4,      "end_offset" : 7,      "type" : "CN_WORD",      "position" : 6    },    {      "token" : "共和",      "start_offset" : 4,      "end_offset" : 6,      "type" : "CN_WORD",      "position" : 7    },    {      "token" : "国",      "start_offset" : 6,      "end_offset" : 7,      "type" : "CN_CHAR",      "position" : 8    },    {      "token" : "国歌",      "start_offset" : 7,      "end_offset" : 9,      "type" : "CN_WORD",      "position" : 9    }  ]}</pre><ul><li>ik_smart智能分词</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl -XGET 'http://localhost:9200/_analyze/?pretty' -d '&#123;</span><br><span class="line">  "analyzer":"ik_smart",</span><br><span class="line">  "text":"中华人民共和国国歌"</span><br><span class="line">&#125;'</span><br></pre></td></tr></table></figure><ul><li>返回值</li></ul><pre>{  "tokens" : [    {      "token" : "中华人民共和国",      "start_offset" : 0,      "end_offset" : 7,      "type" : "CN_WORD",      "position" : 0    },    {      "token" : "国歌",      "start_offset" : 7,      "end_offset" : 9,      "type" : "CN_WORD",      "position" : 1    }  ]}</pre><h3 id="创建一个使用中文分词器的索引"><a href="#创建一个使用中文分词器的索引" class="headerlink" title="创建一个使用中文分词器的索引"></a>创建一个使用中文分词器的索引</h3><h4 id="查看当前索引"><a href="#查看当前索引" class="headerlink" title="查看当前索引"></a>查看当前索引</h4><blockquote><p>curl -XGET ‘localhost:9200/_cat/indices?v&amp;pretty’ # 查看当前索引</p></blockquote><h4 id="创建空索引"><a href="#创建空索引" class="headerlink" title="创建空索引"></a>创建空索引</h4><blockquote><p>curl -XPUT ‘localhost:9200/zhongwen/?pretty’</p></blockquote><h4 id="设置映射类型"><a href="#设置映射类型" class="headerlink" title="设置映射类型"></a>设置映射类型</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">curl -XPOST 'localhost:9200/zhongwen/news/_mapping?pretty' -d '&#123;</span><br><span class="line">"zhongwen":&#123;</span><br><span class="line">    "_all":&#123;</span><br><span class="line">        "analyzer":"ik_max_word",</span><br><span class="line">        "search_analyzer":"ik_max_word",</span><br><span class="line">        "term_vector":"no",</span><br><span class="line">        "store":"false"</span><br><span class="line">    &#125;,</span><br><span class="line">    "properties":&#123;</span><br><span class="line">        "content":&#123;</span><br><span class="line">            "type":"string",</span><br><span class="line">            "store":"no",</span><br><span class="line">            "term_vector":"with_position_offsets",</span><br><span class="line">            "analyzer":"ik_max_word",</span><br><span class="line">            "search_analyzer":"ik_max_word",</span><br><span class="line">            "include_in_all":"true",</span><br><span class="line">            "boost":8</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;'</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span># 测试</span><br><span class="line"><span class="meta">#</span>## 插入数据</span><br><span class="line">curl -XPOST 'http://localhost:9200/zhongwen/news/?pretty' -d'&#123;"content":"刘德华"&#125;'   </span><br><span class="line">curl -XPOST 'http://localhost:9200/zhongwen/news/?pretty' -d'&#123;"content":"中华人民共和国国歌"&#125;'</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>## 测试</span><br><span class="line">TODO 待补充</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> CRF中文分词</span><br><span class="line">TODO 待补充</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> pinyin插件</span><br><span class="line"><span class="meta">#</span># 安装</span><br><span class="line"><span class="meta">&gt;</span> ./bin/elasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-pinyin/releases/download/v5.5.3/elasticsearch-analysis-pinyin-5.5.3.zip</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span># 配置</span><br><span class="line">TODO 好像不需要配置</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span># 基本操作</span><br><span class="line"><span class="meta">#</span>## 创建pinyin索引</span><br><span class="line">```shell</span><br><span class="line">curl -XPUT 'http://localhost:9200/pinyin_plug_test_index/?pretty' -d ' </span><br><span class="line">&#123;</span><br><span class="line">    "index" : &#123;</span><br><span class="line">        "analysis" : &#123;</span><br><span class="line">            "analyzer" : &#123;</span><br><span class="line">                "pinyin_analyzer" : &#123;</span><br><span class="line">                    "tokenizer" : "my_pinyin"</span><br><span class="line">                    &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            "tokenizer" : &#123;</span><br><span class="line">                "my_pinyin" : &#123;</span><br><span class="line">                    "type" : "pinyin",</span><br><span class="line">                    "keep_separate_first_letter" : false,</span><br><span class="line">                    "keep_full_pinyin" : true,</span><br><span class="line">                    "keep_original" : true,</span><br><span class="line">                    "limit_first_letter_length" : 16,</span><br><span class="line">                    "lowercase" : true,</span><br><span class="line">                    "remove_duplicated_term" : true</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;'</span><br></pre></td></tr></table></figure><h2 id="测试验证"><a href="#测试验证" class="headerlink" title="测试验证"></a>测试验证</h2><h3 id="基本测试"><a href="#基本测试" class="headerlink" title="基本测试"></a>基本测试</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl -XGET 'http://localhost:9200/pinyin_plug_test_index/_analyze?pretty' -d '</span><br><span class="line">&#123;</span><br><span class="line">  "text": ["刘德华"],</span><br><span class="line">  "analyzer": "pinyin_analyzer"</span><br><span class="line">&#125;'</span><br></pre></td></tr></table></figure><p>全部 TODO 参考官方文档 <a href="https://github.com/medcl/elasticsearch-analysis-pinyin" target="_blank" rel="noopener">https://github.com/medcl/elasticsearch-analysis-pinyin</a></p><h1 id="自动补全"><a href="#自动补全" class="headerlink" title="自动补全"></a>自动补全</h1><h1 id="热点词"><a href="#热点词" class="headerlink" title="热点词"></a>热点词</h1><h1 id="错别字纠错插件"><a href="#错别字纠错插件" class="headerlink" title="错别字纠错插件"></a>错别字纠错插件</h1><h1 id="整合pinyin及ik中文"><a href="#整合pinyin及ik中文" class="headerlink" title="整合pinyin及ik中文"></a>整合pinyin及ik中文</h1><h2 id="安装及配置"><a href="#安装及配置" class="headerlink" title="安装及配置"></a>安装及配置</h2><p>参见前文</p><h2 id="索引创建及操作"><a href="#索引创建及操作" class="headerlink" title="索引创建及操作"></a>索引创建及操作</h2><h3 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">curl -XPUT 'http://localhost:9200/ik_plus_pinyin/?pretty' -d '</span><br><span class="line">&#123;</span><br><span class="line">    "index" : &#123;</span><br><span class="line">        "analysis" : &#123;</span><br><span class="line">            "analyzer" : &#123;</span><br><span class="line">                "ngram_pinyin_analyzer" : &#123;</span><br><span class="line">                    "tokenizer" : "keyword",</span><br><span class="line">                    "filter" : ["full_pinyin_with_space","word_delimiter","shingle","remove_whitespace"]</span><br><span class="line">                &#125;, "my_pinyin_analyzer" : &#123;</span><br><span class="line">                    "tokenizer" : "keyword",</span><br><span class="line">                    "filter" : ["full_pinyin_no_space"]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            "filter" :&#123;</span><br><span class="line">                "full_pinyin_no_space" : &#123;</span><br><span class="line">                    "type" : "pinyin",</span><br><span class="line">                    "first_letter" : "none",</span><br><span class="line">                    "padding_char" : ""</span><br><span class="line">            &#125;,"full_pinyin_with_space" : &#123;</span><br><span class="line">                    "type" : "pinyin",</span><br><span class="line">                    "first_letter" : "none",</span><br><span class="line">                    "padding_char" : " "</span><br><span class="line">            &#125;,</span><br><span class="line">             "my_edge_ngram_tokenizer" : &#123;</span><br><span class="line">                        "type" : "edgeNGram",</span><br><span class="line">                        "min_gram" : "2",</span><br><span class="line">                        "max_gram" : "5",</span><br><span class="line">                        "token_chars": [ "letter", "digit" ]</span><br><span class="line">                    &#125;,</span><br><span class="line">                    "remove_whitespace": &#123;</span><br><span class="line">                    "type":       "pattern_replace",</span><br><span class="line">                    "pattern": "\\s+",</span><br><span class="line">                    "replacement":""</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;'</span><br></pre></td></tr></table></figure><h3 id="创建type的mapping"><a href="#创建type的mapping" class="headerlink" title="创建type的mapping"></a>创建type的mapping</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">curl -XPOST "http://localhost:9200/ik_plus_pinyin/keyword/_mapping?pretty" -d '</span><br><span class="line">&#123;</span><br><span class="line">  "properties": &#123;</span><br><span class="line">    "name1":&#123;</span><br><span class="line">      "type": "text",</span><br><span class="line">      "fields": &#123;</span><br><span class="line">        "pinyin":&#123;</span><br><span class="line">          "type": "string", </span><br><span class="line">          "analyzer": "ngram_pinyin_analyzer"</span><br><span class="line">        &#125;, "full_pinyin":&#123;</span><br><span class="line">          "type": "string", </span><br><span class="line">          "analyzer": "my_pinyin_analyzer"</span><br><span class="line">        &#125;,</span><br><span class="line">        "first_letter":&#123;</span><br><span class="line">          "type": "string", </span><br><span class="line">          "analyzer": "pinyin"</span><br><span class="line">        &#125;,</span><br><span class="line">        "name1":&#123;</span><br><span class="line">          "type": "string", </span><br><span class="line">          "analyzer": "ik_max_word"</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;'</span><br></pre></td></tr></table></figure><h2 id="基本操作-1"><a href="#基本操作-1" class="headerlink" title="基本操作"></a>基本操作</h2><h3 id="构造数据"><a href="#构造数据" class="headerlink" title="构造数据"></a>构造数据</h3><p>curl -XPOST <a href="http://localhost:9200/ik_plus_pinyin/keyword/?pretty" target="_blank" rel="noopener">http://localhost:9200/ik_plus_pinyin/keyword/?pretty</a> -d’{“name1”:”刘德华”}’<br>curl -XPOST <a href="http://localhost:9200/ik_plus_pinyin/keyword/?pretty" target="_blank" rel="noopener">http://localhost:9200/ik_plus_pinyin/keyword/?pretty</a> -d’{“name1”:”中华人民共和国国歌”}’  </p><h3 id="构造测试"><a href="#构造测试" class="headerlink" title="构造测试"></a>构造测试</h3><h4 id="构造一个带权重的测试"><a href="#构造一个带权重的测试" class="headerlink" title="构造一个带权重的测试"></a>构造一个带权重的测试</h4><ul><li>组合了各种情况，拼音，首字母及汉字混合的情况。可以将query字段取值为<br>[“ldh”, “ldehua”, “liu”, “dehua”, “liu hua”, “hua”, “刘”, “德华”, “华”, “l德hua”]</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">curl -XPOST 'http://localhost:9200/ik_plus_pinyin/keyword/_search?size=50&amp;pretty' -d '</span><br><span class="line">&#123;</span><br><span class="line">  "query": &#123;</span><br><span class="line">    "query_string": &#123;</span><br><span class="line">      "fields": ["name1^100","name1.full_pinyin^30","name1.pinyin^20","name1.first_letter^10"],</span><br><span class="line">      "query": "l德hua",</span><br><span class="line">      "default_operator": "OR"</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;'</span><br></pre></td></tr></table></figure><ul><li>返回</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "took" : 92,</span><br><span class="line">  "timed_out" : false,</span><br><span class="line">  "_shards" : &#123;</span><br><span class="line">    "total" : 5,</span><br><span class="line">    "successful" : 5,</span><br><span class="line">    "failed" : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  "hits" : &#123;</span><br><span class="line">    "total" : 2,</span><br><span class="line">    "max_score" : 80.25915,</span><br><span class="line">    "hits" : [</span><br><span class="line">      &#123;</span><br><span class="line">        "_index" : "ik_plus_pinyin",</span><br><span class="line">        "_type" : "keyword",</span><br><span class="line">        "_id" : "AWbF8CkihRb6RLuoMFEG",</span><br><span class="line">        "_score" : 80.25915,</span><br><span class="line">        "_source" : &#123;</span><br><span class="line">          "name1" : "刘德华"</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        "_index" : "ik_plus_pinyin",</span><br><span class="line">        "_type" : "keyword",</span><br><span class="line">        "_id" : "AWbF8CyChRb6RLuoMFEH",</span><br><span class="line">        "_score" : 4.598851,</span><br><span class="line">        "_source" : &#123;</span><br><span class="line">          "name1" : "中华人民共和国国歌"</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><!--<span id="busuanzi_container_page_pv">   阅读量<span id="busuanzi_value_page_pv"></span>次</span>--></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;需要组合Elastic Search的中文分词，拼音，自动补全，错别字或者英文拼写错误等功能。还要支持热点词。&lt;/p&gt;
    
    </summary>
    
      <category term="技术专题" scheme="http://blog.xiaoyuyu.net/categories/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/"/>
    
    
      <category term="学习笔记" scheme="http://blog.xiaoyuyu.net/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="ElasticSearch" scheme="http://blog.xiaoyuyu.net/tags/ElasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>77-桥牌的计分方法</title>
    <link href="http://blog.xiaoyuyu.net/post/c94961f9.html"/>
    <id>http://blog.xiaoyuyu.net/post/c94961f9.html</id>
    <published>2018-10-28T16:11:33.000Z</published>
    <updated>2019-09-17T02:52:36.344Z</updated>
    
    <content type="html"><![CDATA[<p>暂时还不敢写别的教程，刚刚开始学习桥牌。虽然现在算分都是由电脑来计算的，但是计算分值仍然是一个必须掌握的技巧。</p><a id="more"></a><h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><p>桥牌的净胜分由三部分组成: 基本分（墩分）+ 奖励分 + 罚分。</p><h1 id="基本分计算"><a href="#基本分计算" class="headerlink" title="基本分计算"></a>基本分计算</h1><ul><li>桥牌花色从小到大是低花色(草花,方块),高花色(红心,黑桃).</li></ul><h2 id="花色定约的墩分"><a href="#花色定约的墩分" class="headerlink" title="花色定约的墩分:"></a>花色定约的墩分:</h2><p>♣️和♦️: 基数是6墩，这6墩牌是没有分的，之后每赢一墩牌会计算20分。<br>♥️和♠️: 基数是6墩，这6墩牌是没有分的，之后每赢一墩牌会计算30分。</p><h2 id="无将定约-NT-NoTrump-的墩分"><a href="#无将定约-NT-NoTrump-的墩分" class="headerlink" title="无将定约(NT: NoTrump)的墩分:"></a>无将定约(NT: NoTrump)的墩分:</h2><p>基数是6墩，这6墩牌是没有分的，之后第一墩也就是总第7墩是40分，之后每赢一墩牌会计算30分。<br>TODO: 为什么桥牌要分低花色和高花色？</p><h2 id="定约加倍"><a href="#定约加倍" class="headerlink" title="定约加倍:"></a>定约加倍:</h2><p>顾名思义，如果定约被加倍，则每一墩分数乘以2，如果被再加倍，则每一墩分数乘以4.</p><h2 id="成局定约"><a href="#成局定约" class="headerlink" title="成局定约:"></a>成局定约:</h2><p>当定约的基本墩分达到100分或者以上的时候，称为成局(Game)。所以术语中会把3NT,4♠️和4♥️,5♦️和5♣️的定约称为“叫进局”。<br>3NT: 40+30+30=100.<br>4♠️和4♥️: 30+30+30+30=30✖️4=120分&gt;100.<br>5♦️和5♣️: 20+20+20+20+20=20✖️5=100.  </p><h2 id="当定约的基本分没有达到100分时，都是未成局定约。"><a href="#当定约的基本分没有达到100分时，都是未成局定约。" class="headerlink" title="当定约的基本分没有达到100分时，都是未成局定约。"></a>当定约的基本分没有达到100分时，都是未成局定约。</h2><h2 id="基本分被加倍或者再加倍，也会转换成成局定约。"><a href="#基本分被加倍或者再加倍，也会转换成成局定约。" class="headerlink" title="基本分被加倍或者再加倍，也会转换成成局定约。"></a>基本分被加倍或者再加倍，也会转换成成局定约。</h2><p>6.1 2NT加倍后,(40+30)✖️2=140<br>6.2 1NT被再加倍后,40✖️4=160<br>6.3 2♠️或者2♥️加倍后,(30+30)✖️2=120<br>6.4 1♠️或者1红心被再加倍后,(30)✖️4=120<br>6.5 3♣️或者3♦️加倍后,(20+20+20)✖️2=120<br>6.6 2♣️或者2♦️被再加倍之后，(20+20)✖️4=120<br>所以加倍要慎重!  </p><h1 id="奖励分计算"><a href="#奖励分计算" class="headerlink" title="奖励分计算"></a>奖励分计算</h1><ol><li><p>桥牌的四种定约的级别:<br> 1.1 <strong>未成局</strong>(基本分低于100).<br> 1.2 <strong>成局</strong>(基本分大于等于100)且赢墩小于等于5.<br> 1.3 <strong>小满贯</strong>(Small Slam 赢墩为12).<br> 1.4 <strong>大满贯</strong>(Grand Slam 赢得所有13墩牌).</p></li><li><p><strong>局况(Vulnerability)</strong><br>从发牌开始按照四种顺序循环设置的: 双方无局,南北有局(东西无局),东西有局(南北无局),双方有局。所以一般桥牌的比赛都局数一般会设置为4的整数次数。局况会影响奖励分的计算。</p></li></ol><h2 id="奖励分计算规则"><a href="#奖励分计算规则" class="headerlink" title="奖励分计算规则:"></a>奖励分计算规则:</h2><ul><li>未成局定约: 奖励50分。与局况无关。  </li><li>成局定约:   <ul><li>定约方无局，奖励300分。</li><li>定约方有局，奖励500分。</li></ul></li><li>小满贯定约：<ul><li>定约方无局，除了奖励成局定约奖励的300分以外，再奖励500分的小满贯奖励分。累计800分。</li><li>定约方有局时，除了奖励成局定约奖励的500分以外，再奖励750分的小满贯奖励分，累计1250分，比无局时多了450分。</li></ul></li><li><p>大满贯定约：</p><ul><li>定约方无局，奖励成局定约分300分以外，奖励大满贯的1000分，累计1300.</li><li>定约方有局，奖励成局定约500分以外，再奖励大满贯的1500分，累计2000分。比无局多了700分。</li></ul></li><li><p>也就是说，正好完成定约的奖励分的最高情况，是有局时的大满贯，一共2000分。</p></li></ul><h2 id="超墩奖励"><a href="#超墩奖励" class="headerlink" title="超墩奖励:"></a>超墩奖励:</h2><ul><li>完成没有被加倍的定约时，每超一墩奖励该花色的基本分，也就是♦️和草花20分/墩，♠️和红心30分/墩，无将30分/墩。</li><li>完成加倍定约时，超墩奖励分很复杂。(再次强调，慎重加倍）。<ul><li>定约方无局，超墩与花色无关，不计算墩分，而是<ul><li>被加倍而超墩完成时，每一墩奖励100.</li><li>被再加倍而超墩完成，每一墩奖励200分。</li></ul></li><li>定约方有局，超墩与花色无关，不计算墩分，而是<ul><li>被加倍而完成超墩，每一墩奖励200.</li><li>被再加倍而超墩完成，每一墩奖励400.</li></ul></li></ul></li><li>定约方完成加倍定约(无论是否超墩),都额外奖励50分。</li><li>定约方完成再加倍定约(无论是否超墩),都额外奖励100分。</li></ul><h2 id="小贴士"><a href="#小贴士" class="headerlink" title="小贴士:"></a>小贴士:</h2><ul><li>4♥️超墩1的得分是300奖励分(无局)+30✖️5基本分=450分。5♥️完成的得分也是300奖励分(无局)+30✖️5 =450分，所以大部分情况下，叫到进局即可，也就是4♥️或者4♠️是比5♥️或者5♠️更好的定约，因为后者不会多得分，但是有更多打宕的风险。同理，5NT，4NT也是。</li></ul><h1 id="罚分"><a href="#罚分" class="headerlink" title="罚分"></a>罚分</h1><ul><li>没有被加倍<ul><li>定约方是无局方，每宕一墩罚50分。</li><li>定约方是有局方，每宕一墩罚100分。</li></ul></li><li>定约被加倍时<ul><li>定约方无局，宕一墩罚100，宕二墩罚300，宕三墩罚500，之后每增加一墩罚多300分。(比如7NT被打的宕13，相当于叫了大满贯结果13墩全丢，最多可以罚500+300*10=3500分)</li><li>定约方有局，宕一墩罚200，宕二墩罚500，宕三墩罚800，之后每增加一墩罚多300分。(比如7NT被打的宕13，相当于叫了大满贯结果13墩全丢，最多可以罚800+300*10=3800分)</li></ul></li><li>定约被再加倍时，罚分比上面的情况分别再翻一倍。<strong>所以罚分和是否叫到进局无关，但是和是否有局有关。1NT宕4和3NT宕4的惩罚是一样的。</strong> </li></ul><h1 id="分值计算来指导叫牌。"><a href="#分值计算来指导叫牌。" class="headerlink" title="分值计算来指导叫牌。"></a>分值计算来指导叫牌。</h1><ul><li>进局和小满贯，大满贯情况下，奖励分比墩分多了很多，所以如果能进局而没进局，或者能打满贯没叫大满贯，分差会非常的大。<ul><li>3♥️超墩1=30✖️4+50=170分，而4红心是300分+30✖️4= 420分，一样的赢墩数，多了250分。</li></ul></li><li>如果不能进局，就尽量停在低阶段。</li><li>NT的难度更大，所以3NT就进局了。</li><li>一定要量力而行。</li><li>利用局况，可以适当进行牺牲叫：比如对方有局，对方打成能的800，而你方无局，被打宕也就赔200，那就可以尝试牺牲叫。反之亦然。<p><!--<span id="busuanzi_container_page_pv"> 阅读量<span id="busuanzi_value_page_pv"></span>次</span>--></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;暂时还不敢写别的教程，刚刚开始学习桥牌。虽然现在算分都是由电脑来计算的，但是计算分值仍然是一个必须掌握的技巧。&lt;/p&gt;
    
    </summary>
    
      <category term="技术专题" scheme="http://blog.xiaoyuyu.net/categories/%E6%8A%80%E6%9C%AF%E4%B8%93%E9%A2%98/"/>
    
    
      <category term="桥牌" scheme="http://blog.xiaoyuyu.net/tags/%E6%A1%A5%E7%89%8C/"/>
    
      <category term="桥牌规则" scheme="http://blog.xiaoyuyu.net/tags/%E6%A1%A5%E7%89%8C%E8%A7%84%E5%88%99/"/>
    
  </entry>
  
  <entry>
    <title>76-elastic-search-索引别名</title>
    <link href="http://blog.xiaoyuyu.net/post/bd9d21fe.html"/>
    <id>http://blog.xiaoyuyu.net/post/bd9d21fe.html</id>
    <published>2018-10-22T15:10:01.000Z</published>
    <updated>2019-09-17T02:52:36.343Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>索引别名像一个快捷方式或者软连接:<br>    在运行的集群中可以直接无缝切换。<br>    给多个索引分组<br>     给索引的一个子集创建视图   </p></blockquote><a id="more"></a><h1 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法:"></a>基本用法:</h1><ul><li>创建名为my_index_v1的索引,将别名my_index指向它   </li></ul><blockquote><p>curl -X PUT “localhost:9200/my_index_v1”<br>curl -X PUT “localhost:9200/my_index_v1/_alias/my_index”  </p></blockquote><ul><li>检查这个别名指向了哪一个索引:  </li></ul><blockquote><p>curl -X GET “localhost:9200/*/_alias/my_index”</p></blockquote><pre>{"my_index_v1":{"aliases":{"my_index":{}}}}</pre><ul><li>哪些别名指向了这个索引:   <blockquote><p>curl -X GET “localhost:9200/my_index_v1/_alias/*”</p></blockquote></li></ul><ul><li><p>利用索引别名修改映射:</p><pre>curl -X PUT "localhost:9200/my_index_v2" -H 'Content-Type: application/json' -d'{  "mappings": {      "my_type": {          "properties": {              "tags": {                  "type":   "string",                  "index":  "not_analyzed"              }          }      }  }}'</pre></li><li><p>使用reindex的方式重新索引数据。scroll导出数据,bulk导入新的索引。</p></li><li>Scroll API查出第一波数据及获取_scroll游标,去掉sort字段可以加快排序速度.<pre>curl -XGET 'localhost:9200/my_index_v1/_search?scroll=3m' -H 'Content-Type: application/json' -d'{  "query":{      "match_all": {}  },  "sort": ["_doc"],  "size": 2000}</pre></li></ul><pre>{"_scroll_id":"DnF1ZXJ5VGhlbkZldGNoBQAAAAAAAABPFnEwNDBMUERrUW1HZlpEZVJCRkxzRGcAAAAAAAAAUBZxMDQwTFBEa1FtR2ZaRGVSQkZMc0RnAAAAAAAAAE0WcTA0MExQRGtRbUdmWkRlUkJGTHNEZwAAAAAAAABMFnEwNDBMUERrUW1HZlpEZVJCRkxzRGcAAAAAAAAAThZxMDQwTFBEa1FtR2ZaRGVSQkZMc0Rn","took":84,"timed_out":false,"_shards":{"total":5,"successful":5,"failed":0},"hits":{"total":0,"max_score":null,"hits":[]}}</pre><ul><li><p>根据返回的_scroll_id继续向下获取数据,直到结束</p><pre>curl -XGET  'localhost:9200/_search/scroll'  -d'{  "scroll" : "30m",   "scroll_id" : "DnF1ZXJ5VGhlbkZldGNoBQAAAAAAAABPFnEwNDBMUERrUW1HZlpEZVJCRkxzRGcAAAAAAAAAUBZxMDQwTFBEa1FtR2ZaRGVSQkZMc0RnAAAAAAAAAE0WcTA0MExQRGtRbUdmWkRlUkJGTHNEZwAAAAAAAABMFnEwNDBMUERrUW1HZlpEZVJCRkxzRGcAAAAAAAAAThZxMDQwTFBEa1FtR2ZaRGVSQkZMc0Rn" }'</pre></li><li><p>使用bulk API插入数据</p><pre>curl -XPOST 'localhost:9200/my_index_v2/_bulk' -H 'Content-Type: application/json' -d'{"index": {"_index" : "my_index_new", "_type" : "my_type", "_id" : "3"}}{"title" : "2017-01-01"}'</pre></li><li><p>使用原子操作将索引别名指向新的索引。<br><pre><br>curl -X POST “localhost:9200/_aliases” -H ‘Content-Type: application/json’ -d’<br>{<br>  “actions”: [</pre></p><pre><code>{ &quot;remove&quot;: { &quot;index&quot;: &quot;my_index_v1&quot;, &quot;alias&quot;: &quot;my_index&quot; }},{ &quot;add&quot;:    { &quot;index&quot;: &quot;my_index_v2&quot;, &quot;alias&quot;: &quot;my_index&quot; }}</code></pre><p>  ]<br>}’<br></p><p><!--<span id="busuanzi_container_page_pv"> 阅读量<span id="busuanzi_value_page_pv"></span>次</span>--></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;索引别名像一个快捷方式或者软连接:&lt;br&gt;    在运行的集群中可以直接无缝切换。&lt;br&gt;    给多个索引分组&lt;br&gt;     给索引的一个子集创建视图   &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="术业专攻" scheme="http://blog.xiaoyuyu.net/categories/%E6%9C%AF%E4%B8%9A%E4%B8%93%E6%94%BB/"/>
    
    
      <category term="学习笔记" scheme="http://blog.xiaoyuyu.net/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Elastic Search" scheme="http://blog.xiaoyuyu.net/tags/Elastic-Search/"/>
    
  </entry>
  
  <entry>
    <title>75-elastic-search-settings-and-mappings</title>
    <link href="http://blog.xiaoyuyu.net/post/b33f37.html"/>
    <id>http://blog.xiaoyuyu.net/post/b33f37.html</id>
    <published>2018-10-21T19:29:13.000Z</published>
    <updated>2019-09-17T02:52:36.343Z</updated>
    
    <content type="html"><![CDATA[<p>elastic search中的配置和mappings定义了索引的基本配置和数据结构及数据结构的基本配置。其中字段的类型类似于关系型数据库里面的字段映射。</p><a id="more"></a><h1 id="Settings"><a href="#Settings" class="headerlink" title="Settings"></a>Settings</h1><h2 id="查看所有索引"><a href="#查看所有索引" class="headerlink" title="查看所有索引"></a>查看所有索引</h2><blockquote><p>curl ‘localhost:9200/_cat/indices?v&amp;pretty’</p></blockquote><pre>shengl-pro:tmp shengl$ curl 'localhost:9200/_cat/indices?v&pretty'health status index       uuid                   pri rep docs.count docs.deleted store.size pri.store.sizeyellow open   address     EvIdMEAdRd2fSNPK2GXOfw   5   1         11            0     45.3kb         45.3kbyellow open   book        N4ifaCnKSZ-25XQSY-eVYA   5   1          7            1     27.1kb         27.1kbyellow open   customer    FTwjUka-TxeD_U7YAm40hA   5   1          2            0      7.2kb          7.2kbyellow open   addressfile LHFYHXa9R1iBx6-LMy3aSQ   5   1          2            0      4.6kb          4.6kb</pre><h2 id="查询索引settings"><a href="#查询索引settings" class="headerlink" title="查询索引settings"></a>查询索引settings</h2><blockquote><p>curl -XGET ‘localhost:9200/addressfile/_settings?pretty’</p></blockquote><pre>shengl-pro:tmp shengl$ curl -XGET 'localhost:9200/addressfile/_settings?pretty'{  "addressfile" : { # index Name    "settings" : { # settings info      "index" : {         "creation_date" : "1539444600576",        "number_of_shards" : "5",        "number_of_replicas" : "1",        "uuid" : "LHFYHXa9R1iBx6-LMy3aSQ",        "version" : {          "created" : "5050399"        },        "provided_name" : "addressfile"      }    }  }}</pre><h2 id="新建索引及其配置"><a href="#新建索引及其配置" class="headerlink" title="新建索引及其配置"></a>新建索引及其配置</h2><ul><li>创建一个只有主分片没有副本的索引<pre>curl -X PUT "localhost:9200/my_temp_index" -H 'Content-Type: application/json' -d'{  "settings": {      "number_of_shards" :   1,      "number_of_replicas" : 0  }}'</pre></li></ul><h2 id="修改索引Settings"><a href="#修改索引Settings" class="headerlink" title="修改索引Settings"></a>修改索引Settings</h2><ul><li>通过update修改副本数<pre>curl -X PUT "localhost:9200/my_temp_index/_settings" -H 'Content-Type: application/json' -d'{  "number_of_replicas": 1}'</pre></li></ul><h2 id="配置分析器"><a href="#配置分析器" class="headerlink" title="配置分析器"></a>配置分析器</h2><ul><li>standard,通过单词边界分割切词</li><li>standard词汇但愿过滤器,整理分词器触发的语汇但愿</li><li>lowercase,转换为小写</li><li><p>stop删除停用词 ,默认不会被打开</p></li><li><p>创建一个新的分析器</p><pre>curl -X PUT "localhost:9200/spanish_docs" -H 'Content-Type: application/json' -d'{  "settings": {      "analysis": {          "analyzer": {              "es_std": {                  "type":      "standard",                  "stopwords": "_spanish_"              }          }      }  }}'</pre></li></ul><h2 id="自定义分析器"><a href="#自定义分析器" class="headerlink" title="自定义分析器"></a>自定义分析器</h2><ul><li><p>一个分析器组合了三种函数,顺序执行   </p><ul><li><strong>字符过滤器</strong>,整理尚未被分词的字符串,比如HTML格式的网页中的<p>,<div>,且可以吧&amp;Aacute转为对应的真实字符。一个分析器可能有0个或者多个字符过滤器。</div></p></li><li><strong>分词器</strong>,一个分析器必须有一个唯一的分词器。用来分词。</li><li><strong>词单元过滤器</strong>,可以修改，过滤，添加或者移除单元。<pre>template:{"settings": {  "analysis": {      "char_filter": { ... custom character filters ... },      "tokenizer" : { ... custom tokenizer ... },      "filter": { ... custom filter ... },      "analyzer": { ... custom analyzers ... },}</pre></li></ul></li><li><p>示范: 一个HTML分析器</p><pre>curl -X PUT "localhost:9200/my_index" -H 'Content-Type: application/json' -d'{  "settings": {      "analysis": {          "char_filter": {              "&_to_and": {                  "type":       "mapping",                  "mappings": [ "&=> and "]          }},          "filter": {              "my_stopwords": {                  "type":       "stop",                  "stopwords": [ "the", "a" ]          }},          "analyzer": {              "my_analyzer": {                  "type":         "custom",                  "char_filter":  [ "html_strip", "&_to_and" ],                  "tokenizer":    "standard",                  "filter":       [ "lowercase", "my_stopwords" ]          }}}}}'</pre></li><li><p>追加应用分析器</p><pre>curl -X PUT "localhost:9200/my_index/_mapping/my_type" -H 'Content-Type: application/json' -d'{  "properties": {      "title": {          "type":      "string",          "analyzer":  "my_analyzer"      }  }}'</pre></li></ul><h1 id="索引模板"><a href="#索引模板" class="headerlink" title="索引模板"></a>索引模板</h1><h2 id="创建一个索引模板"><a href="#创建一个索引模板" class="headerlink" title="创建一个索引模板"></a>创建一个索引模板</h2><pre>curl -XPUT 'localhost:9200/_template/my_logs' -d '{ #1 创建一个名为my_logs的模板    "template": "logstash-*', #2 应用于所有以logstash-开头的索引    "order": 1, #3 将会覆盖默认的logstash模板,因为默认模板的order更低    "settings": {        "number_of_shards":1 #4 限制主分片数量为1    },    "mappings": {        "_default_": { #5 为所有类型禁用_all            "_all": {                "enabled": false            }        }    },    "aliases": {        "last_3_months": {} #6 添加到last_3_month别名中,别名是最佳实践    }}</pre><pre>shengl-pro:tmp shengl$ curl -XPUT 'localhost:9200/_template/my_logs' -d '{     "template": "logstash-*",      "order": 1,      "settings": {         "number_of_shards":1      },     "mappings": {         "_default_": {              "_all": {                 "enabled": false             }         }     },     "aliases": {         "last_3_months": {}      } }'{"acknowledged":true}</pre><h1 id="Mappings"><a href="#Mappings" class="headerlink" title="Mappings"></a>Mappings</h1><blockquote><p>ES的Mapping比较灵活(相对于关系型数据库中的字段设置+索引还要多),默认会识别类型(当然可能会出错),也可以自己定义(使用分词器,是否分词,是否存储等等)</p></blockquote><h2 id="查询索引的信息"><a href="#查询索引的信息" class="headerlink" title="查询索引的信息"></a>查询索引的信息</h2><ul><li>下列命令会展示索引的所有信息,包括settings和mappings  <blockquote><p>curl -XGET ‘localhost:9200/address/?pretty’</p></blockquote><pre>shengl-pro:tmp shengl$ curl -XGET 'localhost:9200/address/?pretty'{"address" : {  "aliases" : { },  "mappings" : {    "tiny" : {      "properties" : {        "city" : {          "type" : "text",          "fields" : {            "keyword" : {              "type" : "keyword",              "ignore_above" : 256            }          }        },        "country" : {          "type" : "text",          "fields" : {            "keyword" : {              "type" : "keyword",              "ignore_above" : 256            }          }        },        "region" : {          "type" : "text",          "fields" : {            "keyword" : {              "type" : "keyword",              "ignore_above" : 256            }          }        }      }    },    "normal" : {      "properties" : {        "base" : {          "properties" : {            "country" : {              "type" : "text",              "fields" : {                "keyword" : {                  "type" : "keyword",                  "ignore_above" : 256                }              }            }          }        },        "city" : {          "type" : "text",          "fields" : {            "keyword" : {              "type" : "keyword",              "ignore_above" : 256            }          }        },        "country" : {          "type" : "text",          "fields" : {            "keyword" : {              "type" : "keyword",              "ignore_above" : 256            }          }        },        "detail" : {          "properties" : {            "city" : {              "type" : "text",              "fields" : {                "keyword" : {                  "type" : "keyword",                  "ignore_above" : 256                }              }            },            "region" : {              "type" : "text",              "fields" : {                "keyword" : {                  "type" : "keyword",                  "ignore_above" : 256                }              }            }          }        },        "rank" : {          "type" : "long"        },        "region" : {          "type" : "text",          "fields" : {            "keyword" : {              "type" : "keyword",              "ignore_above" : 256            }          }        }      }    }  },  "settings" : {    "index" : {      "creation_date" : "1539435278771",      "number_of_shards" : "5",      "number_of_replicas" : "1",      "uuid" : "EvIdMEAdRd2fSNPK2GXOfw",      "version" : {        "created" : "5050399"      },      "provided_name" : "address"    }  }}}</pre></li></ul><h2 id="创建索引时指定映射"><a href="#创建索引时指定映射" class="headerlink" title="创建索引时指定映射"></a>创建索引时指定映射</h2><p><pre><br>curl -XPUT ‘localhost:9200/blog_post?pretty’ -H ‘Content-Type: application/json’ -d ‘{<br>    “mappings”: {<br>        “user”: {<br>            “_all”:         {“enabled”: false},<br>            “properties”:   {<br>                “title”:    {“type”: “text”},</pre></p><pre><code>            &quot;name&quot;:     {&quot;type&quot;: &quot;text&quot;},            &quot;age&quot;:      {&quot;type&quot;: &quot;integer&quot;}        }    },    &quot;blogpost&quot;:{        &quot;_all&quot;:         {&quot;enabled&quot;: false},        &quot;properties&quot;:   {            &quot;title&quot;:    {&quot;type&quot;: &quot;text&quot; },            &quot;body&quot;:     {&quot;type&quot;: &quot;text&quot; },            &quot;summary&quot;:  {&quot;type&quot;: &quot;text&quot; },            &quot;user_id&quot;:  {&quot;type&quot;: &quot;keyword&quot;},            &quot;created&quot;:  {                &quot;type&quot;: &quot;date&quot;,                &quot;format&quot;: &quot;strict_date_optional_time|| epoch_millis&quot;            }        }    }}</code></pre><p>}’<br></p><p><!--<span id="busuanzi_container_page_pv">   阅读量<span id="busuanzi_value_page_pv"></span>次</span>--></p><p></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;elastic search中的配置和mappings定义了索引的基本配置和数据结构及数据结构的基本配置。其中字段的类型类似于关系型数据库里面的字段映射。&lt;/p&gt;
    
    </summary>
    
      <category term="术业专攻" scheme="http://blog.xiaoyuyu.net/categories/%E6%9C%AF%E4%B8%9A%E4%B8%93%E6%94%BB/"/>
    
    
      <category term="学习笔记" scheme="http://blog.xiaoyuyu.net/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Elastic Search" scheme="http://blog.xiaoyuyu.net/tags/Elastic-Search/"/>
    
  </entry>
  
  <entry>
    <title>74-elastic-search索引映射</title>
    <link href="http://blog.xiaoyuyu.net/post/b972e990.html"/>
    <id>http://blog.xiaoyuyu.net/post/b972e990.html</id>
    <published>2018-10-20T00:28:05.000Z</published>
    <updated>2019-09-17T02:52:36.342Z</updated>
    
    <content type="html"><![CDATA[<p>elastic search的映射类似于关系型数据库里面的字段映射。对数据结构的定义。</p><a id="more"></a><ul><li>映射可以分为静态映射和动态映射。</li><li>dynamic属性为 true动态添加字段,false:忽略新字段,strict: 碰到陌生字段抛出异常。</li><li>字段类型<ul><li>string 字符串</li><li>integer 数字</li><li>long 64bit整形</li><li>float 32bit小数</li><li>double 64bit浮点型</li><li>bool 布尔型</li><li>date 日期</li><li>binary 二进制</li></ul></li><li><p>一个示例</p><pre>POST /[indexName]{  "settings": {      "number_of_shards" : 5,      "number_of_replicas" : 1  },  "mappings: {      "books" : { # type          "properties": {              "title":{                  "type":"string"              },              "name": {                  "type":"string",                  "index":"not_analyzed"              },              "publish_date": {                  "type":"date",                  "index":"not_analyzed"              },              "number": {                  "type":"object",                  "dynamic": true              }          }      }  }}                                    </pre></li><li><p>获取映射</p><blockquote><p>GET [indexName]/_mapping</p></blockquote></li><li>获取index为library,type为books的映射<blockquote><p>GET library/_mapping/books</p></blockquote></li><li>获取集群内所有的映射信息<blockquote><p>GET /_all/_mapping/</p></blockquote></li><li>获取集群内多个映射信息<blockquote><p>GET /_all/_mapping/books,bank_account</p></blockquote></li><li>删除映射和以上相同<blockquote><p>DELETE /library/books<br>DELETE /library/bookes/_mapping<br>DELETE /library/_mapping/book, bank_account</p></blockquote></li><li>无法修改已经存在的mapping映射<ul><li>重新建立一个索引，然后重新定义映射</li><li>把之前索引里的数据导入到新的索引里。</li></ul></li><li>修改索引动作<ul><li>运行 PUT /[现有indexName]/_alias/[indexAliasName]</li><li>新建一个索引,定义好新的映射</li><li>别名指向新索引<pre>POST /_aliases{  "actions":[      {"remove" : {"index":"现有indexName","alias":"indexAliasName"}},      {"add": {"index":"新索引Name","alias":"indexAliasName"}}  ]}</pre> </li></ul></li><li>修改字段只能通过新建索引的方式<ul><li>先创建索引，修改字段<pre>PUT [indexName]{  "mappings": {      "typeName":{          "properties": {              "date" {                  "type":"date",                  "format": "yyyy-MM-dd"              }          }      }  }}</pre></li><li>将数据复制过去<br><pre><br>POST _reindex<br>{<br>  “source”:{<pre><code>&quot;index&quot;: &quot;metricbeat-*&quot;(老索引名)</code></pre>  },<br>  “dest”: {<pre><code>&quot;index&quot;: &quot;metricbeat&quot; (新索引名)</code></pre>  }<br>}<br></pre><p><!--<span id="busuanzi_container_page_pv">阅读量<span id="busuanzi_value_page_pv"></span>次</span>--></p></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;elastic search的映射类似于关系型数据库里面的字段映射。对数据结构的定义。&lt;/p&gt;
    
    </summary>
    
      <category term="术业专攻" scheme="http://blog.xiaoyuyu.net/categories/%E6%9C%AF%E4%B8%9A%E4%B8%93%E6%94%BB/"/>
    
    
      <category term="学习笔记" scheme="http://blog.xiaoyuyu.net/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Elastic Search" scheme="http://blog.xiaoyuyu.net/tags/Elastic-Search/"/>
    
  </entry>
  
  <entry>
    <title>73-金字塔原理-读书笔记</title>
    <link href="http://blog.xiaoyuyu.net/post/55f1049a.html"/>
    <id>http://blog.xiaoyuyu.net/post/55f1049a.html</id>
    <published>2018-10-16T15:25:25.000Z</published>
    <updated>2019-09-17T02:52:36.341Z</updated>
    
    <content type="html"><![CDATA[<p>如何系统的写作和表达？运用金字塔原理。本文就尝试用金字塔原理来构建。</p><a id="more"></a><h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>最近开始读书和写字，由于需要更好的学习，开始研究这两者的方法论，关于如何读书，个人已经有一些方法。但是关于如何写作，之前更多的是靠文艺的灵感。作为一个科技和科普的博客（而不是小说家），选定了《金字塔原理》这本书，来指导我的写作思路和逻辑。（其实这里把SCQA)都交待完了。</p><h2 id="冲突"><a href="#冲突" class="headerlink" title="冲突"></a>冲突</h2><p>正如背景中提到的，我需要更加严谨的思路来表达我最近学习到的诸多方法论。而不是之前的文章中徒有的那些形式。</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>如何提升自己的逻辑思维能力，演讲材料和汇报材料的组织能力呢？</p><h2 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h2><p>金字塔原理是我找寻到并决定研究的诸多方法论中最有名的一个。</p><h1 id="构思"><a href="#构思" class="headerlink" title="构思"></a>构思</h1><p>构思的过程中，这篇文章应该取名为，《金字塔原理读书笔记》——&gt; 如何使用金字塔原理构造你的逻辑思维及写作汇报材料的骨架。</p><h1 id="搭框架"><a href="#搭框架" class="headerlink" title="搭框架"></a>搭框架</h1><h2 id="时间顺序"><a href="#时间顺序" class="headerlink" title="时间顺序"></a>时间顺序</h2><h2 id="空间顺序"><a href="#空间顺序" class="headerlink" title="空间顺序"></a>空间顺序</h2><h2 id="程度顺序"><a href="#程度顺序" class="headerlink" title="程度顺序"></a>程度顺序</h2><h1 id="定内容"><a href="#定内容" class="headerlink" title="定内容"></a>定内容</h1><h2 id="观点"><a href="#观点" class="headerlink" title="观点"></a>观点</h2><h2 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h2><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p><!--<span id="busuanzi_container_page_pv">   阅读量<span id="busuanzi_value_page_pv"></span>次</span>--></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如何系统的写作和表达？运用金字塔原理。本文就尝试用金字塔原理来构建。&lt;/p&gt;
    
    </summary>
    
      <category term="术与道" scheme="http://blog.xiaoyuyu.net/categories/%E6%9C%AF%E4%B8%8E%E9%81%93/"/>
    
    
      <category term="方法论" scheme="http://blog.xiaoyuyu.net/tags/%E6%96%B9%E6%B3%95%E8%AE%BA/"/>
    
      <category term="他山之石" scheme="http://blog.xiaoyuyu.net/tags/%E4%BB%96%E5%B1%B1%E4%B9%8B%E7%9F%B3/"/>
    
  </entry>
  
  <entry>
    <title>72-python基础-1</title>
    <link href="http://blog.xiaoyuyu.net/post/eae73e4e.html"/>
    <id>http://blog.xiaoyuyu.net/post/eae73e4e.html</id>
    <published>2018-10-13T16:41:40.000Z</published>
    <updated>2019-09-17T02:52:36.340Z</updated>
    
    <content type="html"><![CDATA[<p>菜鸟教程确实做的挺好的。我这里只是搬运一下。</p><a id="more"></a><h1 id="环境搭建及使用"><a href="#环境搭建及使用" class="headerlink" title="环境搭建及使用"></a>环境搭建及使用</h1><ul><li>打开<a href="https://www.python.org/downloads/" target="_blank" rel="noopener">下载地址</a></li><li>选择对应版本的安装包,这里使用的是3.7版本。下载并且安装。</li><li>查看版本 <pre>shengl-pro:11-python shengl$ python3 --versionPython 3.7.0shengl-pro:11-python shengl$ pip3 --versionpip 10.0.1 from /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/pip (python 3.7)</pre></li></ul><h1 id="简单操作"><a href="#简单操作" class="headerlink" title="简单操作"></a>简单操作</h1><h2 id="helloworld"><a href="#helloworld" class="headerlink" title="helloworld"></a>helloworld</h2><h3 id="命令行操作"><a href="#命令行操作" class="headerlink" title="命令行操作"></a>命令行操作</h3><blockquote><p>python3 # 进入交互式命令行</p></blockquote><pre>shengl-pro:11-python shengl$ python3Python 3.7.0 (v3.7.0:1bf9cc5093, Jun 26 2018, 23:26:24) [Clang 6.0 (clang-600.0.57)] on darwinType "help", "copyright", "credits" or "license" for more information.>>> >>> print("Hello World!")Hello World!>>> exit();shengl-pro:11-python shengl$</pre><hr><h3 id="编写HelloWorld程序"><a href="#编写HelloWorld程序" class="headerlink" title="编写HelloWorld程序"></a>编写HelloWorld程序</h3><blockquote><p>vim /Users/shengl/8-learn/11-python/00-startup/00-HelloWorld.py</p></blockquote><pre>#!/usr/bin/python3# Author: Shenglprint("Hello, World!")</pre><h1 id="运行程序"><a href="#运行程序" class="headerlink" title="运行程序"></a>运行程序</h1><pre>shengl-pro:00-startup shengl$ python3 00-HelloWorld.py Hello, World!</pre><h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><h4 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h4><ul><li>默认情况下以UTF-8编码,所有字符都是Unicode字符集</li></ul><blockquote><h1 id="coding-utf-8"><a href="#coding-utf-8" class="headerlink" title="-- coding: utf-8 --"></a>-<em>- coding: utf-8 -</em>-</h1></blockquote><h4 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h4><ul><li>一般规则，字母或者下划线，其他部分是字母，数字或者下划线。对大小写敏感。</li></ul><h4 id="保留字"><a href="#保留字" class="headerlink" title="保留字"></a>保留字</h4><ul><li>下述命令可以展示所有保留字</li></ul><pre>shengl-pro:00-startup shengl$ python3Python 3.7.0 (v3.7.0:1bf9cc5093, Jun 26 2018, 23:26:24) [Clang 6.0 (clang-600.0.57)] on darwinType "help", "copyright", "credits" or "license" for more information.>>> import keyword>>> keyword.kwlist['False', 'None', 'True', 'and', 'as', 'assert', 'async', 'await', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield']</pre><h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><ul><li>单行用 #开头，多行用 ‘’’ 或者 “””</li></ul><h4 id="行与缩进"><a href="#行与缩进" class="headerlink" title="行与缩进"></a>行与缩进</h4><ul><li>python用缩进表示代码块。所以对其和好的代码规范很重要。</li><li>\反斜杠用来实现多行语句。也可以用[],{},()来包括。</li></ul><h4 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h4><p>int, bool, float, complex</p><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><ul><li>单引号和双引号作用一致</li><li>三引号可以指定一个多行字符串</li><li>‘\’是转义符号</li><li>“+”连接,*重复</li><li>index下标字符串可以0~ 开始，-1从右边开始。</li><li>python中的字符串不可以改变。没有字符类型，字符就是长度为一的字符串。</li><li>变量[开始下标:结束下标]</li></ul><pre>#! /usr/bin/python3# program name: 03-string.py# comment: learn to use string# author: lingsrcString = "Shengling"print(srcString)                   # 输出字符串print(srcString[0:-1])             # 第一个到倒数第二个print(srcString[0])                # 输出字符串第一个字符print(srcString[2:5])              # 输出从第三个开始到第五个的字符print(srcString[2:])               # 输出从第三个开始的后的所有字符print(srcString * 2)               # 输出字符串两次print(srcString + '你好')           # 连接字符串print('hello\srcString')           # 使用反斜杠(\)+n转义特殊字符print(r'hello\srcString')          # 在字符串前面添加一个 r，表示原始字符串，不会发生转义</pre><p> #输出如下</p><pre>shengl-pro:00-startup shengl$ python3 03-string.py ShenglingShenglinSengenglingShenglingShenglingShengling你好hello\srcStringhello\srcString</pre><h4 id="空行"><a href="#空行" class="headerlink" title="空行"></a>空行</h4><p>函数，方法或者累方法之间用空行分割，表示新的代码开始。和缩进不同的是，它并不是python语法到一部分。<br>在任何语言中，空行也是代码的一部分，不能多，也不要少。(可能不是程序的一部分)。</p><h4 id="import和from-…-import"><a href="#import和from-…-import" class="headerlink" title="import和from … import"></a>import和from … import</h4><p>将整个模块导入, 格式为 import modulename.<br>导入某个(些)函数, 格式为 from modulename import functionName1 [, functionName2 …]<br>将某个模块的函数全部导入，格式为: from modulename import *</p><pre>import sysprint("===========Python import mode=====")print("命令行参数为")for i in sys.argv:    print(i)print('\n python 路径为', sys.path)</pre><h1 id="执行结果"><a href="#执行结果" class="headerlink" title="执行结果"></a>执行结果</h1><pre>shengl-pro:00-startup shengl$ python3 04-import.py ===========Python import mode=====命令行参数为04-import.py python 路径为 ['/Users/shengl/8-learn/11-python/00-startup', '/Library/Frameworks/Python.framework/Versions/3.7/lib/python37.zip', '/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7', '/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/lib-dynload', '/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages']</pre><h4 id="命令行参数"><a href="#命令行参数" class="headerlink" title="命令行参数"></a>命令行参数</h4><blockquote><p>python -h</p></blockquote><pre>shengl-pro:00-startup shengl$ python3 -husage: /Library/Frameworks/Python.framework/Versions/3.7/Resources/Python.app/Contents/MacOS/Python [option] ... [-c cmd | -m mod | file | -] [arg] ...Options and arguments (and corresponding environment variables):-b     : issue warnings about str(bytes_instance), str(bytearray_instance)         and comparing bytes/bytearray with str. (-bb: issue errors)-B     : don't write .pyc files on import; also PYTHONDONTWRITEBYTECODE=x...[etc.]</pre><hr><h1 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h1><ul><li>不可变: Number(数字),String(字符串),Tuple(元组);</li><li>可变: List(列表),Dictionary(字典),Set(集合);</li></ul><h3 id="数字操作"><a href="#数字操作" class="headerlink" title="数字操作"></a>数字操作</h3><pre>a,b,c,d = 20,5.5,True,3+2jprint (type(a), type(b), type(c), type(d))</pre><pre>shengl-pro:00-startup shengl$ python3 10-number.py <class 'int'> <class 'float'> <class 'bool'> <class 'complex'></class></class></class></class></pre><h3 id="判定类型"><a href="#判定类型" class="headerlink" title="判定类型"></a>判定类型</h3><ul><li>type()不会认为子类是一种父类类型。</li><li>isinstance()会认为子类是一种父类类型。</li></ul><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>列表可以嵌套列表，使用广泛。数据类型也可以是任意</p><pre>subList = ["sub1", 4+5j]list = [ 'abc', 1024 , 2+3j, 'helloworld', subList ]    print (list)            # 输出完整列表print (list[3])         # 输出列表第一个元素print (list[1:-1])      # 从第二个开始输出到第三个元素print (list[2:])        # 输出从第三个元素开始的所有元素print (subList * 2)     # 输出两次列表print (list + subList)  # 连接列表</pre> #执行之后的结果<pre>shengl-pro:00-startup shengl$ python3 11-list.py ['abc', 1024, (2+3j), 'helloworld', ['sub1', (4+5j)]]helloworld[1024, (2+3j), 'helloworld'][(2+3j), 'helloworld', ['sub1', (4+5j)]]['sub1', (4+5j), 'sub1', (4+5j)]['abc', 1024, (2+3j), 'helloworld', ['sub1', (4+5j)], 'sub1', (4+5j)]</pre>* 列表的元素可以被改变。用赋值操作 = * List内置了很多方法比如append(),pop()* 写在方括号中间，用逗号隔开* 可以被索引和切片* +进行拼接### Tuple(元组)TODO### Set(集合)TODO### Dictionary(字典)TODO### Python的数据类型转换<hr># Python操作数据库MySQL## 使用mysql-connector### 安装> pip3 install mysql-connector<pre>shengl-pro:00-startup shengl$ python3Python 3.7.0 (v3.7.0:1bf9cc5093, Jun 26 2018, 23:26:24) [Clang 6.0 (clang-600.0.57)] on darwinType "help", "copyright", "credits" or "license" for more information.>>> import mysql.connectorTraceback (most recent call last):  File "<stdin>", line 1, in <module>ModuleNotFoundError: No module named 'mysql'.      # 安装成功之后shengl-pro:00-startup shengl$ pip3 install mysql-connectorCollecting mysql-connector  Downloading https://files.pythonhosted.org/packages/59/e0/775bf5fb3dd4c7f9aa6877907d4a96eecca6886c603dedfea6e843e94560/mysql-connector-2.1.6.tar.gz (11.8MB)    100% |████████████████████████████████| 11.8MB 504kB/s Installing collected packages: mysql-connector  Running setup.py install for mysql-connector ... doneSuccessfully installed mysql-connector-2.1.6You are using pip version 10.0.1, however version 18.1 is available.You should consider upgrading via the 'pip install --upgrade pip' command.>>> import mysql.connector>>>  # 没有产生错误则安装成功。</module></stdin></pre><h3 id="数据库链接"><a href="#数据库链接" class="headerlink" title="数据库链接"></a>数据库链接</h3><ul><li>下载MySQL 5.7并且准备安装<a href="https://dev.mysql.com/downloads/file/?id=479114" target="_blank" rel="noopener">下载地址</a> ,安装MySQL不详细介绍了。</li></ul><pre>TODO 使用标准库</pre><hr><h2 id="使用PyMySQL"><a href="#使用PyMySQL" class="headerlink" title="使用PyMySQL"></a>使用PyMySQL</h2><h3 id="安装准备"><a href="#安装准备" class="headerlink" title="安装准备"></a>安装准备</h3><blockquote><p>pip3 install PyMySQL</p></blockquote><pre>shengl-pro:00-startup shengl$ pip3 install PyMySQLCollecting PyMySQL  Downloading https://files.pythonhosted.org/packages/a7/7d/682c4a7da195a678047c8f1c51bb7682aaedee1dca7547883c3993ca9282/PyMySQL-0.9.2-py2.py3-none-any.whl (47kB)    100% |████████████████████████████████| 51kB 364kB/s Collecting cryptography (from PyMySQL)  Downloading https://files.pythonhosted.org/packages/98/0b/a6f293e5f10095dd8657a1b125c1ba6995c59d39cd8e20355475c8f760d0/cryptography-2.3.1-cp34-abi3-macosx_10_6_intel.whl (1.5MB)    100% |████████████████████████████████| 1.5MB 515kB/s Collecting asn1crypto>=0.21.0 (from cryptography->PyMySQL)  Downloading https://files.pythonhosted.org/packages/ea/cd/35485615f45f30a510576f1a56d1e0a7ad7bd8ab5ed7cdc600ef7cd06222/asn1crypto-0.24.0-py2.py3-none-any.whl (101kB)    100% |████████████████████████████████| 102kB 467kB/s Collecting cffi!=1.11.3,>=1.7 (from cryptography->PyMySQL)  Downloading https://files.pythonhosted.org/packages/0b/ba/32835c9965d8a0090723e1d0b47373365525c4bd08c807b5efdc9fecbc99/cffi-1.11.5-cp37-cp37m-macosx_10_9_x86_64.whl (163kB)    100% |████████████████████████████████| 163kB 496kB/s Requirement already satisfied: idna>=2.1 in /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages (from cryptography->PyMySQL) (2.7)Collecting six>=1.4.1 (from cryptography->PyMySQL)  Downloading https://files.pythonhosted.org/packages/67/4b/141a581104b1f6397bfa78ac9d43d8ad29a7ca43ea90a2d863fe3056e86a/six-1.11.0-py2.py3-none-any.whlCollecting pycparser (from cffi!=1.11.3,>=1.7->cryptography->PyMySQL)  Downloading https://files.pythonhosted.org/packages/68/9e/49196946aee219aead1290e00d1e7fdeab8567783e83e1b9ab5585e6206a/pycparser-2.19.tar.gz (158kB)    100% |████████████████████████████████| 163kB 419kB/s Installing collected packages: asn1crypto, pycparser, cffi, six, cryptography, PyMySQL  Running setup.py install for pycparser ... doneSuccessfully installed PyMySQL-0.9.2 asn1crypto-0.24.0 cffi-1.11.5 cryptography-2.3.1 pycparser-2.19 six-1.11.0</pre><h3 id="测试数据库连接"><a href="#测试数据库连接" class="headerlink" title="测试数据库连接"></a>测试数据库连接</h3><pre>import pymysql # db conndbconn = pymysql.connect("localhost", "root", "titps4gg", "py_test") # 使用cursor() 方法创建一个游标对象 cursorcursor = dbconn.cursor()cursor.execute("SELECT VERSION()") # 使用 fetchone() 方法获取单条数据data = cursor.fetchone()print ("Database version : %s" % data)dbconn.close()</pre><ul><li>运行程序</li></ul><blockquote><p>python3 25-mysql-pymysql-startup.py<br>Database version : 5.7.23</p></blockquote><hr><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><ul><li>创建表</li><li>插入一条多条数据</li><li>查询一条或者多条数据</li><li>更新删除</li><li>执行事务</li></ul><pre>import pymysql# db conndbconn = pymysql.connect("localhost", "test_user", "password", "py_test")# 使用cursor() 方法创建一个游标对象 cursorcursor = dbconn.cursor()# DROP IFEXSITcursor.execute ("DROP TABLE IF EXISTS EMPLOYEE")# 1. 使用预处理创建表createSql = """CREATE TABLE EMPLOYEE(               FIRST_NAME CHAR(20) NOT NULL,                LAST_NAME CHAR(20),               AGE INT(4),               SEX CHAR(1),               INCOME FLOAT)"""cursor.execute(createSql)# 插入数据insertOneSql = """INSERT INTO EMPLOYEE(FIRST_NAME,                  LAST_NAME, AGE, SEX, INCOME)                  VALUES ('Mac', 'Mohan', 20, 'M', 20000),('zhou', 'Yan', 20, 'M', 20000)"""try:     cursor.execute(insertOneSql)     dbconn.commit()except:     print("Error while insert1")     dbconn.rollback()# once againinsertSql = "INSERT INTO EMPLOYEE(FIRST_NAME, \             LAST_NAME, AGE, SEX, INCOME) \             VALUES('%s', '%s', '%d', '%c', '%d') " % \             ('Ling', 'sheng', 20, 'M', 20000)try:     cursor.execute(insertSql)     dbconn.commit()except:     print("Error while insert")     dbconn.rollback()# SearchsearchSql = "SELECT * FROM EMPLOYEE \             WHERE INCOME > '%d'" % (1500)try:     cursor.execute(searchSql)     results = cursor.fetchall()     for row in results:         fname = row[0]         lname = row[1]         age = row[2]         sex = row[3]         income = row[4]         print("fname=%s, lname=%s, age=%d, sex=%s, income=%d" % \              (fname, lname, age, sex, income))except Exception as e:     print("Error while search: {0}".format(e))# UpdateupdateSql = "UPDATE EMPLOYEE SET AGE = AGE + 1 WHERE SEX = '%c'" % ('M')try:     cursor.execute(updateSql)     dbconn.commit()except:     print("Error while update")     dbconn.rollback()# DeletedeleteSql = "DELETE FROM EMPLOYEE WHERE FIRST_NAME = '%s'" % ('Mac')try:     cursor.execute(deleteSql)     dbconn.commit()except:     print("Error while delete")     dbconn.rollback()dbconn.close()</pre><h1 id="执行结果-1"><a href="#执行结果-1" class="headerlink" title="执行结果"></a>执行结果</h1><pre>shengl-pro:00-startup shengl$ python3 26-pymysql-detail.py fname=Mac, lname=Mohan, age=20, sex=M, income=20000fname=zhou, lname=Yan, age=20, sex=M, income=20000fname=Ling, lname=sheng, age=20, sex=M, income=20000 # 数据库中应该有2条数据。</pre><hr><h1 id="Python发送网络请求"><a href="#Python发送网络请求" class="headerlink" title="Python发送网络请求"></a>Python发送网络请求</h1><h3 id="使用urllib"><a href="#使用urllib" class="headerlink" title="使用urllib"></a>使用urllib</h3><pre>import urllib.requestimport urllib.parseurl = "http://localhost:9200/_cat/master?v&pretty"response = urllib.request.urlopen(url)print(response.read().decode('utf-8'))</pre><h1 id="执行代码-这里是对本机的elastic-search做请求"><a href="#执行代码-这里是对本机的elastic-search做请求" class="headerlink" title="执行代码,这里是对本机的elastic search做请求"></a>执行代码,这里是对本机的elastic search做请求</h1><pre>shengl-pro:00-startup shengl$ python3 30-use-urllib.py id                     host      ip        nodeH-thNd-UT6SoHcIN8_c-_g 127.0.0.1 127.0.0.1 H-thNd-</pre><hr><h3 id="使用requests"><a href="#使用requests" class="headerlink" title="使用requests"></a>使用requests</h3><ul><li>安装requests,前面的urllib不需要安装，是python标准库</li></ul><pre>shengl-pro:00-startup shengl$ pip3 install requestsCollecting requests  Downloading https://files.pythonhosted.org/packages/65/47/7e02164a2a3db50ed6d8a6ab1d6d60b69c4c3fdf57a284257925dfc12bda/requests-2.19.1-py2.py3-none-any.whl (91kB)    100% |████████████████████████████████| 92kB 433kB/s Collecting chardet<3.1.0,>=3.0.2 (from requests)  Downloading https://files.pythonhosted.org/packages/bc/a9/01ffebfb562e4274b6487b4bb1ddec7ca55ec7510b22e4c51f14098443b8/chardet-3.0.4-py2.py3-none-any.whl (133kB)    100% |████████████████████████████████| 143kB 2.4MB/s Collecting urllib3<1.24,>=1.21.1 (from requests)  Downloading https://files.pythonhosted.org/packages/bd/c9/6fdd990019071a4a32a5e7cb78a1d92c53851ef4f56f62a3486e6a7d8ffb/urllib3-1.23-py2.py3-none-any.whl (133kB)    100% |████████████████████████████████| 143kB 1.7MB/s Collecting certifi>=2017.4.17 (from requests)  Downloading https://files.pythonhosted.org/packages/df/f7/04fee6ac349e915b82171f8e23cee63644d83663b34c539f7a09aed18f9e/certifi-2018.8.24-py2.py3-none-any.whl (147kB)    100% |████████████████████████████████| 153kB 1.2MB/s Collecting idna<2.8,>=2.5 (from requests)  Downloading https://files.pythonhosted.org/packages/4b/2a/0276479a4b3caeb8a8c1af2f8e4355746a97fab05a372e4a2c6a6b876165/idna-2.7-py2.py3-none-any.whl (58kB)    100% |████████████████████████████████| 61kB 438kB/s Installing collected packages: chardet, urllib3, certifi, idna, requestsSuccessfully installed certifi-2018.8.24 chardet-3.0.4 idna-2.7 requests-2.19.1 urllib3-1.23</2.8,></1.24,></3.1.0,></pre><p>编写代码</p><pre>import requests  url = "http://localhost:9200/_cat/master?v&pretty"response = requests.get(url)print(response.text)</pre><h1 id="运行代码的返回结果"><a href="#运行代码的返回结果" class="headerlink" title="运行代码的返回结果"></a>运行代码的返回结果</h1><pre>shengl-pro:00-startup shengl$ python3 31-use-requests.py id                     host      ip        nodeH-thNd-UT6SoHcIN8_c-_g 127.0.0.1 127.0.0.1 H-thNd-</pre><hr><h1 id="Python操作JSON"><a href="#Python操作JSON" class="headerlink" title="Python操作JSON"></a>Python操作JSON</h1><h3 id="基本说明"><a href="#基本说明" class="headerlink" title="基本说明"></a>基本说明</h3><ul><li>json.dumps(): 对数据进行编码。</li><li>json.loads(): 对数据进行解码。</li><li>编码转换说明<ul><li>python格式 =&gt; JSON格式</li><li>dict =&gt; object</li><li>list,tuple =&gt; array</li><li>str =&gt; string</li><li>int,float,int- &amp; float.. =&gt; number</li><li>True =&gt; true</li><li>False =&gt; false</li><li>None =&gt; null</li></ul></li><li>解码说明<ul><li>object =&gt; dict</li><li>arry =&gt; list</li><li>string =&gt; str</li><li>number(int) =&gt; int</li><li>number(real) =&gt; float</li><li>其他逆向</li></ul></li></ul><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><pre>import json# 构造数据结构subList = ["sub1", 4+5j]listData = [ 'abc', 1024 , 2+3j, 'helloworld', subList ]dictData = {    'number1' : 1,    'name' : 'ling',    'url' : 'http://blog.xiaoyuyu.net'}# Python object to JSONjsonDict = json.dumps(dictData)print("python原始字典", repr(dictData))print("转换为JSON对象后的字典", jsonDict)print("")subList = [1,2,3,4]listData = [ 'abc', 1024 , "2+3j", 'helloworld', subList]jsonList = json.dumps(listData)print("python原始列表", repr(listData))print("转换为JSON对象后的列表", jsonList)print("")# JSON to Python object pythonObject1 = json.loads(jsonDict)print("pythonObject1['name']: ", pythonObject1['name'])pythonObject2 = json.loads(jsonList)print("pythonObject2[4][2]:", pythonObject2[4][2])# 写入文件with open('/tmp/demo-list.json', 'w') as outputFileList:    json.dump(jsonList, outputFileList)with open('/tmp/demo-dict.json', 'w') as outputFileDict:    json.dump(jsonDict, outputFileDict)# 从文件中读取with open('/tmp/demo-list.json', 'r') as inputFileList:    poListFile = json.loads(inputFileList)</pre><p> #执行结果</p><pre>shengl-pro:00-startup shengl$ python3 40-json-transfer.py python原始字典 {'number1': 1, 'name': 'ling', 'url': 'http://blog.xiaoyuyu.net'}转换为JSON对象后的字典 {"number1": 1, "name": "ling", "url": "http://blog.xiaoyuyu.net"}python原始列表 ['abc', 1024, '2+3j', 'helloworld', [1, 2, 3, 4]]转换为JSON对象后的列表 ["abc", 1024, "2+3j", "helloworld", [1, 2, 3, 4]]pythonObject1['name']:  lingpythonObject2[4][2]: 3</pre><h1 id="查看文件，已经写入"><a href="#查看文件，已经写入" class="headerlink" title="查看文件，已经写入"></a>查看文件，已经写入</h1><blockquote><p>vim /tmp/demo-dict.json </p></blockquote><pre>"{\"number1\": 1, \"name\": \"ling\", \"url\": \"http://blog.xiaoyuyu.net\"}"</pre><hr><h1 id="Python正则表达式"><a href="#Python正则表达式" class="headerlink" title="Python正则表达式"></a>Python正则表达式</h1><p>TODO</p><p><!--<span id="busuanzi_container_page_pv">   阅读量<span id="busuanzi_value_page_pv"></span>次</span>--></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;菜鸟教程确实做的挺好的。我这里只是搬运一下。&lt;/p&gt;
    
    </summary>
    
      <category term="术业专攻" scheme="http://blog.xiaoyuyu.net/categories/%E6%9C%AF%E4%B8%9A%E4%B8%93%E6%94%BB/"/>
    
    
      <category term="python" scheme="http://blog.xiaoyuyu.net/tags/python/"/>
    
      <category term="基础教程" scheme="http://blog.xiaoyuyu.net/tags/%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>71-我是如何学习的?</title>
    <link href="http://blog.xiaoyuyu.net/post/8c2f38b1.html"/>
    <id>http://blog.xiaoyuyu.net/post/8c2f38b1.html</id>
    <published>2018-10-13T13:57:45.000Z</published>
    <updated>2019-09-17T02:52:36.339Z</updated>
    
    <content type="html"><![CDATA[<p>最近因为在总结方法论的东西，可能需要一个系列的总结来发掘自己如何认识自我。总结，然后才能改进，本文并不是为了教学。😄</p><a id="more"></a><h1 id="提纲"><a href="#提纲" class="headerlink" title="提纲"></a>提纲</h1><ul><li>如何学习新技术</li></ul><h1 id="如何学习技术"><a href="#如何学习技术" class="headerlink" title="如何学习技术"></a>如何学习技术</h1><h2 id="学习框架的步骤"><a href="#学习框架的步骤" class="headerlink" title="学习框架的步骤"></a>学习框架的步骤</h2><ul><li>先运行(用)起来，俗称跑起来。</li><li>基本的使用指南。尝试，验证。</li><li>官方文档和基本的API都尝试一下。</li><li>系统的总结，概括的看一下文档。找出重点，归纳分类。</li><li>深入研究解决具体问题的方法。找到几个场景来实践。</li><li>看情况决定找有代表性的好文章来看。分析。</li><li>总结归纳最佳实践，干货。</li></ul><h1 id="如何构建计算机的知识体系"><a href="#如何构建计算机的知识体系" class="headerlink" title="如何构建计算机的知识体系"></a>如何构建计算机的知识体系</h1><h2 id="学习一门语言的步骤-lt-–"><a href="#学习一门语言的步骤-lt-–" class="headerlink" title="学习一门语言的步骤&lt;!–"></a>学习一门语言的步骤<p>&lt;!–<span id="busuanzi_container_page_pv"></span></p></h2><p>   阅读量<span id="busuanzi_value_page_pv"></span>次<br>–&gt;</p><p></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近因为在总结方法论的东西，可能需要一个系列的总结来发掘自己如何认识自我。总结，然后才能改进，本文并不是为了教学。😄&lt;/p&gt;
    
    </summary>
    
      <category term="术与道" scheme="http://blog.xiaoyuyu.net/categories/%E6%9C%AF%E4%B8%8E%E9%81%93/"/>
    
    
      <category term="方法论" scheme="http://blog.xiaoyuyu.net/tags/%E6%96%B9%E6%B3%95%E8%AE%BA/"/>
    
      <category term="认识自我系列" scheme="http://blog.xiaoyuyu.net/tags/%E8%AE%A4%E8%AF%86%E8%87%AA%E6%88%91%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>69-elastic-search-api</title>
    <link href="http://blog.xiaoyuyu.net/post/3e9b01b2.html"/>
    <id>http://blog.xiaoyuyu.net/post/3e9b01b2.html</id>
    <published>2018-10-13T11:31:33.000Z</published>
    <updated>2019-09-17T02:52:36.338Z</updated>
    
    <content type="html"><![CDATA[<p>学习归纳和整理elastic search api </p><a id="more"></a><h1 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h1><ul><li><strong>文档API</strong> 对文档进行增删改查操作。</li><li><strong>搜索API</strong> 实现搜索检索功能。</li><li><strong>索引API</strong> 对索引进行操作。</li><li><strong>查看API</strong> 按照直观的形式返回数据。</li><li><strong>集群API</strong> 对集群进行操作和查看的API。</li></ul><h1 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h1><ul><li>每一个命令后加入v参数都可以打开详细输出  </li></ul><blockquote><p>curl -XGET ‘localhost:9200/_cat/master?v&amp;pretty’。</p></blockquote><pre>shengl-pro:tmp shengl$ curl -XGET 'localhost:9200/_cat/master?v&pretty'id                     host      ip        nodeH-thNd-UT6SoHcIN8_c-_g 127.0.0.1 127.0.0.1 H-thNd-  shengl-pro:tmp shengl$ curl -XGET 'localhost:9200/_cat/master?pretty'H-thNd-UT6SoHcIN8_c-_g 127.0.0.1 127.0.0.1 H-thNd-  </pre><ul><li>每一个命令后都可以加入pretty参数来格式化输出(看json会方便点)</li></ul><blockquote><p>TODO</p></blockquote><ul><li>每一个命令后都可以加入help来查看用法</li></ul><blockquote><p>curl -XGET ‘localhost:9200/_cat/health?help&amp;pretty’</p></blockquote><pre>shengl-pro:tmp shengl$ curl -XGET 'localhost:9200/_cat/health?help&pretty'epoch                 | t,time                                   | seconds since 1970-01-01 00:00:00  timestamp             | ts,hms,hhmmss                            | time in HH:MM:SS                   cluster               | cl                                       | cluster name                       status                | st                                       | health status                      node.total            | nt,nodeTotal                             | total number of nodes              node.data             | nd,nodeData                              | number of nodes that can store datashards                | t,sh,shards.total,shardsTotal            | total number of shards             pri                   | p,shards.primary,shardsPrimary           | number of primary shards           relo                  | r,shards.relocating,shardsRelocating     | number of relocating nodes         init                  | i,shards.initializing,shardsInitializing | number of initializing nodes       unassign              | u,shards.unassigned,shardsUnassigned     | number of unassigned shards        pending_tasks         | pt,pendingTasks                          | number of pending tasks            max_task_wait_time    | mtwt,maxTaskWaitTime                     | wait time of longest task pending  active_shards_percent | asp,activeShardsPercent                  | active number of shards in percent </pre><ul><li>指定输出的列</li></ul><blockquote><p>curl -XGET ‘localhost:9200/_cat/nodes?h=ip,heapPercent&amp;pretty’</p></blockquote><pre>shengl-pro:tmp shengl$ curl -XGET 'localhost:9200/_cat/nodes?h=ip,heapPercent&pretty'127.0.0.1 8</pre><ul><li>更改输出的单位,size,bytes..</li></ul><blockquote><p>curl ‘localhost:9200/_cat/indeces?bytes=b’</p></blockquote><p>TODO</p><ul><li>更改响应文本格式,可以使用format参数，取值为text,json,smile,yaml, cbor,也可以使用 Http header “Accept: “ , <strong>Elastic Search应该做了很多巧妙的适配器来转换各种格式的数据。这个架构实践可以借鉴在开源项目中。</strong></li></ul><blockquote><p>curl ‘localhost:9200/_cat/indices?pretty&amp;format=cbor’</p></blockquote><blockquote><p>curl ‘localhost:9200/_cat/indices?pretty’ -H “Accept: application/yaml”</p></blockquote><pre>shengl-pro:tmp shengl$ curl 'localhost:9200/_cat/indices?pretty' -H "Accept: application/smile":)??shengl-pro:tmp shengl$ shengl-pro:tmp shengl$ shengl-pro:tmp shengl$ curl 'localhost:9200/_cat/indices?pretty' -H "Accept: application/yaml"--- []</pre><h1 id="文档API"><a href="#文档API" class="headerlink" title="文档API"></a>文档API</h1><p>TODO</p><h1 id="搜索API"><a href="#搜索API" class="headerlink" title="搜索API"></a>搜索API</h1><p>TODO</p><h1 id="索引API-CRUD操作及批处理"><a href="#索引API-CRUD操作及批处理" class="headerlink" title="索引API,CRUD操作及批处理"></a>索引API,CRUD操作及批处理</h1><h2 id="对索引的基本操作"><a href="#对索引的基本操作" class="headerlink" title="对索引的基本操作"></a>对索引的基本操作</h2><h3 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h3><blockquote><p>curl -XPUT ‘localhost:9200/[indexName]?pretty’</p></blockquote><pre>shengl-pro:tmp shengl$ curl -XPUT 'localhost:9200/address?pretty'{  "acknowledged" : true,  "shards_acknowledged" : true}</pre><h3 id="查看所有的索引"><a href="#查看所有的索引" class="headerlink" title="查看所有的索引"></a>查看所有的索引</h3><blockquote><p>curl ‘localhost:9200/_cat/indices?v&amp;pretty’</p></blockquote><pre>shengl-pro:tmp shengl$ curl 'localhost:9200/_cat/indices?v&pretty'health status index   uuid                   pri rep docs.count docs.deleted store.size pri.store.sizeyellow open   map     ixyXdNSqTO6I30lsT40_eg   5   1          0            0       810b           810byellow open   address EvIdMEAdRd2fSNPK2GXOfw   5   1          0            0       810b           810b</pre>前面创建的address索引有五个私有分片和一个副本，0个文档。### 索引设置#### Mappings与Settings<pre>PUT /[indexName]{    "settings": {...},    "mappings": {        "field_one": { .. },        "field_two": { ... },        ...    }}</pre><ul><li>config/elasticsearch.yml在每个节点下添加配置:<br>action.auto_create_index: false # 禁止自动创建索引。</li></ul><h4 id="static和dynamic设置"><a href="#static和dynamic设置" class="headerlink" title="static和dynamic设置:"></a>static和dynamic设置:</h4><ul><li>static设置在索引关闭或者创建时可以指定。</li><li><p>dynamic设置可以直接通过Update api来设置修改。</p></li><li><p>动态索引设置:</p><pre>PUT /[indexName]/_settings{  "index" : {      "number_of_replicas": 0  }}</pre></li></ul><h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><blockquote><p>curl -XPUT ‘[ip]:[port]/[indexName]/[type]/[docId]’ -d ‘<br>{<br>     [document content]<br>} </p></blockquote><pre>shengl-pro:tmp shengl$ curl -XPUT 'localhost:9200/address/normal/1?pretty' -d ' {     "country": "china",     "city":"beijing",     "region":"haidian"}'{  "_index" : "address",  "_type" : "normal",  "_id" : "1",  "_version" : 1,  "result" : "created",  "_shards" : {    "total" : 2,    "successful" : 1,    "failed" : 0  },  "created" : true #表示插入成功}</pre><h3 id="获取索引"><a href="#获取索引" class="headerlink" title="获取索引"></a>获取索引</h3><blockquote><p>curl -XGET ‘[ip]:[port]/[indexName]/[indexType]/[docId]’</p></blockquote><pre>shengl-pro:tmp shengl$ curl -XGET 'localhost:9200/address/normal/1?pretty'{  "_index" : "address",  "_type" : "normal",  "_id" : "1",  "_version" : 1,  "found" : true,  "_source" : {    "country" : "china",    "city" : "beijing",    "region" : "haidian"  }}</pre><h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><blockquote><p>curl -XDELETE ‘[ip]:[port]/[indexName]/[indexType]/[docId]’</p></blockquote><pre>shengl-pro:tmp shengl$ curl -XDELETE 'localhost:9200/address/normal/1?pretty'{  "found" : true,  "_index" : "address",  "_type" : "normal",  "_id" : "1",  "_version" : 2,  "result" : "deleted",  "_shards" : {    "total" : 2,    "successful" : 1,    "failed" : 0  }}* 再查已经删除掉了.shengl-pro:tmp shengl$ curl -XGET 'localhost:9200/address/normal/1?pretty'{  "_index" : "address",  "_type" : "normal",  "_id" : "1",  "found" : false}</pre><h3 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h3><blockquote><p>curl -XDELETE ‘[ip]:[port]/[indexName]’<br>只要有接口权限的情况下就可以直接删除，这也是Elastic Search不适合直接作为最终存储的原因之一，当然可以做一些限制，然而还是不安全。</p></blockquote><pre>shengl-pro:tmp shengl$ curl -XDELETE 'localhost:9200/map'{"acknowledged":true}shengl-pro:tmp shengl$ curl 'localhost:9200/_cat/indices?v'health status index   uuid                   pri rep docs.count docs.deleted store.size pri.store.sizeyellow open   address EvIdMEAdRd2fSNPK2GXOfw   5   1          0            0       839b           839b</pre><h3 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h3><blockquote><p>curl -XPUT ‘[ip]:[port]/[indexName]/[indexType]/[docId]’ -d ‘[document content]’<br>并没有使用Update的指令，也就是说插入操作其实就是<strong>可重入的</strong>。</p></blockquote><pre>shengl-pro:tmp shengl$ curl -XPUT 'localhost:9200/address/normal/1?pretty' -d ' {     "country": "china",     "city":"beijing",     "region":"chaoyang"}'  {  "_index" : "address",  "_type" : "normal",  "_id" : "1",  "_version" : 2,  "result" : "updated",  "_shards" : {    "total" : 2,    "successful" : 1,    "failed" : 0  },  "created" : false}</pre><blockquote><p>curl -XPOST ‘[ip]:[port]/[indexName]/[indexType]/[docId]/_update’ -d ‘[document content]’<br>显式的update</p></blockquote><ul><li>直接Update不存在的id，会报错。ADD重复的数据可重入，但是反过来Update不存在的数据不行。体会一下它的设计理念。</li></ul><pre>shengl-pro:tmp curl -XPOST 'localhost:9200/address/normal/2/_update?pretty' -d '{     "doc":   {      "base": {         "country": "china"      },      "detail":{         "city":"beijing",         "region":"chaoyang"      }   }}'{  "error" : {    "root_cause" : [      {        "type" : "document_missing_exception",        "reason" : "[normal][2]: document missing",        "index_uuid" : "EvIdMEAdRd2fSNPK2GXOfw",        "shard" : "2",        "index" : "address"      }    ],    "type" : "document_missing_exception",    "reason" : "[normal][2]: document missing",    "index_uuid" : "EvIdMEAdRd2fSNPK2GXOfw",    "shard" : "2",    "index" : "address"  },  "status" : 404}</pre><h4 id="通过doc参数直接修改文档内容"><a href="#通过doc参数直接修改文档内容" class="headerlink" title="通过doc参数直接修改文档内容"></a>通过doc参数直接修改文档内容</h4><pre>curl -XPOST 'localhost:9200/address/normal/1/_update?pretty' -d '{     "doc":   {      "base": {         "country": "china"      },      "detail":{         "city":"beijing",         "region":"chaoyang"      },      "rank": 20   }}'{  "_index" : "address",  "_type" : "normal",  "_id" : "1",  "_version" : 3,  "result" : "updated",  "_shards" : {    "total" : 2,    "successful" : 1,    "failed" : 0  }}</pre><h4 id="通过script参数对文档进行操作。"><a href="#通过script参数对文档进行操作。" class="headerlink" title="通过script参数对文档进行操作。"></a>通过script参数对文档进行操作。</h4><pre>curl -XPOST 'localhost:9200/address/normal/1/_update?pretty' -d '{    "script" : "ctx._source.rank += 1.5"}'{  "_index" : "address",  "_type" : "normal",  "_id" : "1",  "_version" : 5,  "result" : "updated",  "_shards" : {    "total" : 2,    "successful" : 1,    "failed" : 0  }}</pre><ul><li>Pattern 基本的API模式</li></ul><blockquote><p>curl -X[REST Verb] ‘[ip]:[port]/[indexName]/[indexType]/[docId]’ -d</p></blockquote><h2 id="批处理"><a href="#批处理" class="headerlink" title="批处理"></a>批处理</h2><ul><li>索引批处理操作</li></ul><blockquote><p>curl -POST ‘[ip]:[port]/[indexName]/[indexType]/_bulk’ -d ‘<br>{[document content1]},<br>{[document content1]}…<br>‘</p></blockquote><ul><li>批量创建用 index参数JSON中的设置_index和_type会覆盖掉URL中的配置 </li></ul><pre>shengl-pro:tmp shengl$ curl -XPOST 'localhost:9200/address/tiny/_bulk?pretty' -d '         {"index":{"_id":"23"}}         {"county":"china", "city": "beijing" }         {"index":{"_id":"24"}}         {"county":"china", "city": "changsha" }         ' 返回每一条的处理结果。{  "took" : 25,  "errors" : false,  "items" : [    {      "index" : {        "_index" : "address",        "_type" : "tiny",        "_id" : "23",        "_version" : 3,        "result" : "updated",        "_shards" : {          "total" : 2,          "successful" : 1,          "failed" : 0        },        "created" : false,        "status" : 200      }    },    {      "index" : {        "_index" : "address",        "_type" : "tiny",        "_id" : "24",        "_version" : 2,        "result" : "updated",        "_shards" : {          "total" : 2,          "successful" : 1,          "failed" : 0        },        "created" : false,        "status" : 200      }    }  ]}</pre><ul><li>批量处理还可以将update和create或者其他操作同时进行。返回结果中也会返回每一个操作的结果。</li></ul><blockquote><p>curl -XPOST ‘[ip]:[port]/[indexName]/[indexType]/_bulk’ -d ‘<br>{‘[type]:{“_id”:”[docId]”}}<br>{“doc”:{[doc content]}}…’</p></blockquote><pre>shengl-pro:tmp shengl$ curl -XPOST 'localhost:9200/address/tiny/_bulk?pretty' -d '          {"update":{"_id":"23"}}          {"doc":{"county":"china", "city": "shenzhen" }}          {"delete":{"_id":"24"}}          ' #同样会分条目返回{  "took" : 26,  "errors" : false,  "items" : [    {      "update" : {        "_index" : "address",        "_type" : "tiny",        "_id" : "23",        "_version" : 6,        "result" : "updated",        "_shards" : {          "total" : 2,          "successful" : 1,          "failed" : 0        },        "status" : 200      }    },    {      "delete" : {        "found" : true,        "_index" : "address",        "_type" : "tiny",        "_id" : "24",        "_version" : 4,        "result" : "deleted",        "_shards" : {          "total" : 2,          "successful" : 1,          "failed" : 0        },        "status" : 200      }    }  ]}</pre><h2 id="导入数据集合"><a href="#导入数据集合" class="headerlink" title="导入数据集合"></a>导入数据集合</h2><ul><li>vim /tmp/address-1.json</li></ul><pre>{"index":{"_id":"10001"}}{"county":"china","city":"beijing"}{"index":{"_id":"10002"}}{"county":"china","city":"changsha"}</pre><blockquote><p>curl -XPOST ‘[ip]:[port]/[indexName]/[indexType]/_bulk?pretty’ –data-binary “@filepath”</p></blockquote><pre>curl -XPOST 'localhost:9200/addressfile/normal/_bulk?pretty' --data-binary "@/tmp/address-1.json" # 返回{  "took" : 115,  "errors" : false,  "items" : [    {      "index" : {        "_index" : "addressfile",        "_type" : "normal",        "_id" : "10001",        "_version" : 1,        "result" : "created",        "_shards" : {          "total" : 2,          "successful" : 1,          "failed" : 0        },        "created" : true,        "status" : 201      }    },    {      "index" : {        "_index" : "addressfile",        "_type" : "normal",        "_id" : "10002",        "_version" : 1,        "result" : "created",        "_shards" : {          "total" : 2,          "successful" : 1,          "failed" : 0        },        "created" : true,        "status" : 201      }    }  ]}</pre><h2 id="Scroll"><a href="#Scroll" class="headerlink" title="Scroll"></a>Scroll</h2><ul><li>scroll 基本用法<blockquote><p>curl -XGET ‘[ip]:[port]/[indexName]/[indexType]/_search?scroll=1m&amp;search_type=scan’ -d ‘<br>{“query”: { [query param] }}’ # 貌似最新版的es已经不支持scan(不排序)了？</p></blockquote></li></ul><pre>shengl-pro:tmp shengl$ curl -XGET 'localhost:9200/address/normal/_search?scroll=1m&pretty' -d '> {"size":2,"query":{"match_all":{}}}'{  "_scroll_id" : "DnF1ZXJ5VGhlbkZldGNoBQAAAAAAAAALFkgtdGhOZC1VVDZTb0hjSU44X2MtX2cAAAAAAAAADBZILXRoTmQtVVQ2U29IY0lOOF9jLV9nAAAAAAAAAA0WSC10aE5kLVVUNlNvSGNJTjhfYy1fZwAAAAAAAAAOFkgtdGhOZC1VVDZTb0hjSU44X2MtX2cAAAAAAAAADxZILXRoTmQtVVQ2U29IY0lOOF9jLV9n",  "took" : 4,  "timed_out" : false,  "_shards" : {    "total" : 5,    "successful" : 5,    "failed" : 0  },  "hits" : {    "total" : 3,    "max_score" : 1.0,    "hits" : [      {        "_index" : "address",        "_type" : "normal",        "_id" : "12",        "_score" : 1.0,        "_source" : {          "city" : "changsha"        }      },      {        "_index" : "address",        "_type" : "normal",        "_id" : "1",        "_score" : 1.0,        "_source" : {          "country" : "china",          "city" : "beijing",          "region" : "chaoyang",          "detail" : {            "city" : "beijing",            "region" : "chaoyang"          },          "base" : {            "country" : "china"          },          "rank" : 21        }      }    ]  }}   # 可以使用scroll_id继续查询curl -XGET 'localhost:9200/_search/scroll?scroll=1m&pretty&scroll_id=DnF1ZXJ5VGhlbkZldGNoBQAAAAAAAAALFkgtdGhOZC1VVDZTb0hjSU44X2MtX2cAAAAAAAAADBZILXRoTmQtVVQ2U29IY0lOOF9jLV9nAAAAAAAAAA0WSC10aE5kLVVUNlNvSGNJTjhfYy1fZwAAAAAAAAAOFkgtdGhOZC1VVDZTb0hjSU44X2MtX2cAAAAAAAAADxZILXRoTmQtVVQ2U29IY0lOOF9jLV9n'</pre><ul><li><p>scannling search的性能优势</p><ul><li>没有排序和打分，就是doc入库时的顺序。</li><li>不支持聚合</li><li>最初的查询结果的hits列表中不包含结果。</li><li>如果设定了size，则是从每个分片中的数量。也就是说size=3，有5个shard，则每次会查出15条结果。</li></ul></li><li><p>主动清除Scroll API,虽然设置了超时时间，但是也可以主动清除。</p></li></ul><blockquote><p>curl -XDELETE ‘[ip]:[port]/_search/scroll’ -d “[scrollId]”<br>curl -XDELETE ‘[ip]:[port]/_search/scroll/_all’</p></blockquote><ul><li>分析源码可以看到build包含几个部分<ul><li>Type：String，查询的类型ParsedScrollId.QUERY_THEN_FETCH_TYPE=queryThenFetch；</li><li>searchPhaseResults：结果信息</li><li>attributes：查询条件参数</li></ul></li></ul><h1 id="查看API"><a href="#查看API" class="headerlink" title="查看API"></a>查看API</h1><h1 id="集群-amp-运维常用API"><a href="#集群-amp-运维常用API" class="headerlink" title="集群&amp;运维常用API"></a>集群&amp;运维常用API</h1><p>TODO.  </p><h3 id="查看集群健康"><a href="#查看集群健康" class="headerlink" title="查看集群健康"></a>查看集群健康</h3><blockquote><p>curl ‘localhost:9200/_cat/health?v’</p></blockquote><pre>epoch      timestamp cluster       status node.total node.data shards pri relo init unassign pending_tasks max_task_wait_time active_shards_percent1539434816 20:46:56  elasticsearch green           1         1      0   0    0    0        0             0                  -                100.0%</pre><h3 id="查看所有集群的节点列表"><a href="#查看所有集群的节点列表" class="headerlink" title="查看所有集群的节点列表"></a>查看所有集群的节点列表</h3><blockquote><p>curl ‘localhost:9200/_cat/nodes?v&amp;pretty’</p></blockquote><pre>shengl-pro:tmp shengl$ curl 'localhost:9200/_cat/nodes?v&pretty'ip        heap.percent ram.percent cpu load_1m load_5m load_15m node.role master name127.0.0.1            8          98  99   12.93                  mdi       *      H-thNd-</pre><p><!--<span id="busuanzi_container_page_pv">   阅读量<span id="busuanzi_value_page_pv"></span>次</span>--></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学习归纳和整理elastic search api &lt;/p&gt;
    
    </summary>
    
      <category term="术业专攻" scheme="http://blog.xiaoyuyu.net/categories/%E6%9C%AF%E4%B8%9A%E4%B8%93%E6%94%BB/"/>
    
    
      <category term="学习笔记" scheme="http://blog.xiaoyuyu.net/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="elastic search" scheme="http://blog.xiaoyuyu.net/tags/elastic-search/"/>
    
  </entry>
  
</feed>
